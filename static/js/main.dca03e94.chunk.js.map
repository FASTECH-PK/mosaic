{"version":3,"sources":["Button.tsx","PointerUtils.tsx","Constants.tsx","SrcBlock.tsx","DstBlock.tsx","MscBlock.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","text","style","onClick","title","buttonRef","useRef","useEffect","handlePointerDown","e","stopPropagation","current","addEventListener","removeEventListener","ref","role","height","lineHeight","minWidth","padding","textAlign","pointerEvents","className","UseWheelZoom","rendererRef","camera","cameraDown","THREE","renderer","handleMousewheel","preventDefault","width","clientWidth","clientHeight","copy","position","percent","deltaY","nextZoom","Math","min","max","z","zoomPixel","tan","fov","PI","relx","clientX","offsetLeft","rely","clientY","offsetTop","worldRelX","worldRelY","newZoomPixel","diffX","diffY","x","y","passive","UsePointerPan","diff","pointersRef","pointers","push","id","pointerId","pointerDown","primary","isPrimary","pointer","setPointerCapture","handlePointerMove","length","filter","p","a","b","minDown","maxDown","combined","down","dragged","adjustedDown","downDiff","sqrt","pow","handlePointerUp","splice","findIndex","releasePointerCapture","imageScaler","cellSize","SrcBlock","box","scene","setSrcInfo","srcCanvasRef","srcCanvasTextureRef","srcPlaneRef","setSrcId","srcInfo","activeRef","pasteSrc","extraCanvasRef","smallCanvasRef","inputRef","useState","sizeReadout","setSizeReadout","canvas","document","createElement","canvasTexture","geometry","material","map","plane","add","loadImage","counterRef","src","image","Image","uuidv4","onload","counter","cols","round","rows","scale","extraCanvas","getContext","drawImage","lookups","smallCanvas","stx","ctx","fillStyle","fillRect","cells","Array","fill","_","i","drawCell","shift","undefined","c","r","floor","data","getImageData","quad","j","pixel","needsUpdate","console","log","batchSize","setTimeout","handleChange","this","files","item","type","indexOf","URL","createObjectURL","elementRef","onPointerDown","bottom","top","left","color","zIndex","accept","display","right","justifyContent","alignItems","dispatchEvent","PointerEvent","bubbles","cancelable","view","window","DstBlock","setDstInfo","dstCanvasRef","swapInfo","dstCanvasTextureRef","dstPlaneRef","setDstId","dstInfo","srcId","dstId","outline","gap","transformOrigin","transform","MouseEvent","MscBlock","canvasRef","canvasTextureRef","planeRef","loaded","setLoaded","CanvasTexture","Infinity","minIndex","dstLookup","srcLookup","fullSum","k","lookupPixel","sum","v","l","abs","reduce","sc","sr","toBlob","blob","imageURL","link","setAttribute","Date","getTime","App","layoutRef","layouts","setLayouts","showAbout","setShowAbout","scenesRef","camerasRef","holdCanvasRef","srcPasteSrc","setSrcPasteSrc","dstPasteSrc","setDstPasteSrc","pressedRef","setLayout","innerWidth","innerHeight","srcInfoRef","dstInfoRef","srcBox","dstBox","mscBox","cameraSrc","cameraDst","cameraMsc","setSize","setPixelRatio","devicePixelRatio","sceneSrc","sceneDst","sceneMsc","autoClear","animate","clear","setScissor","setViewport","render","requestAnimationFrame","handleResize","layoutBoxes","aspect","updateProjectionMatrix","move","onPaste","clipboardData","items","file","getAsFile","alert","onDrop","dataTransfer","onDrag","dropEffect","pressed","discretePanCamera","discreteZoom","change","downHandler","press","key","toLowerCase","includes","shiftKey","upHandler","index","srcCanvas","dstCanvas","holdCanvas","holdInfo","JSON","parse","stringify","srcPlane","dstPlane","background","maxWidth","fontSize","borderBottom","cursor","marginBottom","href","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"+PAgEeA,EA9DA,SAAC,GAUT,IATLC,EASI,EATJA,KACAC,EAQI,EARJA,MACAC,EAOI,EAPJA,QACAC,EAMI,EANJA,MAOMC,EAAYC,iBAA8B,MA8BhD,OA5BAC,qBAAU,WACR,IAAMC,EAAoB,SAACC,GACzBA,EAAEC,mBAGJ,OADAL,EAAUM,QAASC,iBAAiB,cAAeJ,GAC5C,WACDH,EAAUM,SACZN,EAAUM,QAASE,oBACjB,cACAL,MAIL,IAEHD,qBAAU,WACR,IAAMC,EAAoB,SAACC,GACzBA,EAAEC,kBACFP,EAAQM,IAGV,OADAJ,EAAUM,QAASC,iBAAiB,QAASJ,GACtC,WACDH,EAAUM,SACZN,EAAUM,QAASE,oBAAoB,QAASL,MAGnD,IAGD,qBACEM,IAAKT,EACLU,KAAK,SACLX,MAAOA,EACPF,MAAK,2BACAA,GADA,IAEHc,OAAQ,GACRC,WAAY,OACZC,SAAU,GACVC,QAAS,QACTC,UAAW,SACXC,cAAe,SAEjBC,UAAU,SAbZ,SAeGrB,KCvDMsB,EAAe,SAC1BC,EACAC,GAEA,IAAMC,EAAapB,iBAAO,IAAIqB,KAE9BpB,qBAAU,WACR,IAAMqB,EAAWJ,EAAYb,QAEvBkB,EAAmB,SAACpB,GACxBA,EAAEqB,iBACF,IAAMC,EAAQH,EAASI,YACjBhB,EAASY,EAASK,aAExBP,EAAWf,QAAQuB,KAAKT,EAAOU,UAE/B,IAAMC,GAAWpB,EAASP,EAAE4B,QAAUrB,EAChCsB,EAAWC,KAAKC,IAAI,GAAID,KAAKE,IAAI,EAAGhB,EAAOU,SAASO,EAAIN,IAIxDO,EADJ,EAAIJ,KAAKK,IAAKnB,EAAOoB,IAAMN,KAAKO,GAAM,KAAOpB,EAAWf,QAAQ+B,EAChC1B,EAC5B+B,EAAOtC,EAAEuC,QAAUpB,EAASqB,WAAalB,EAAQ,EACjDmB,IAASzC,EAAE0C,QAAUvB,EAASwB,UAAYpC,EAAS,GACnDqC,EAAYN,EAAOJ,EACnBW,EAAYJ,EAAOP,EAInBY,EADJ,EAAIhB,KAAKK,IAAKnB,EAAOoB,IAAMN,KAAKO,GAAM,KAAOR,EACPtB,EAKlCwC,EAHYT,EAAOQ,EAGCF,EACpBI,EAHYP,EAAOK,EAGCD,EAE1B7B,EAAOU,SAASuB,EAAIhC,EAAWf,QAAQ+C,EAAIF,EAC3C/B,EAAOU,SAASwB,EAAIjC,EAAWf,QAAQgD,EAAIF,EAC3ChC,EAAOU,SAASO,EAAIJ,GAGtB,GAAIV,EAIF,OAHAA,EAAShB,iBAAiB,QAASiB,EAAkB,CACnD+B,SAAS,IAEJ,WACLhC,EAASf,oBAAoB,QAASgB,MAGzC,CAACL,EAAaC,KAWNoC,EAAgB,SAACrC,EAAkBC,GAC9C,IAAMC,EAAapB,iBAAO,IAAIqB,KACxBmC,EAAOxD,iBAAO,IAAIqB,KAClBoC,EAAczD,iBAAsB,IAE1CC,qBAAU,WACR,IAAMqB,EAAWJ,EAAYb,QACvBqD,EAAWD,EAAYpD,QAEvBH,EAAoB,SAACC,GACzBA,EAAEqB,iBAEFkC,EAASC,KAAK,CACZC,GAAIzD,EAAE0D,UACNT,EAAGjD,EAAEuC,QAAUpB,EAASqB,WACxBU,EAAGlD,EAAE0C,QAAUvB,EAASwB,UACxBgB,YAAa,CACX3D,EAAEuC,QAAUpB,EAASqB,WACrBxC,EAAE0C,QAAUvB,EAASwB,WAEvBiB,QAAS5D,EAAE6D,YAXgC,oBAavBN,GAbuB,IAa7C,2BAAgC,CAAC,IAAtBO,EAAqB,QAC9BA,EAAQH,YAAc,CAACG,EAAQb,EAAGa,EAAQZ,IAdC,8BAgB7CjC,EAAWf,QAAQuB,KAAKT,EAAOU,UAE/BP,EAAS4C,kBAAkB/D,EAAE0D,YAGzBM,EAAoB,SAAChE,GACzBA,EAAEqB,iBACF,IAAMC,EAAQH,EAASI,YACjBhB,EAASY,EAASK,aAExB,GAAwB,IAApB+B,EAASU,OAAc,CACzB,IAAMH,EAAUP,EAAS,GACzBO,EAAQb,EAAIjD,EAAEuC,QAAUpB,EAASqB,WACjCsB,EAAQZ,EAAIlD,EAAE0C,QAAUvB,EAASwB,UACjC,IAEMT,EADJ,EAAIJ,KAAKK,IAAKnB,EAAOoB,IAAMN,KAAKO,GAAM,KAAOpB,EAAWf,QAAQ+B,EAChC1B,EAClC8C,EAAKnD,QAAQ+C,GACVjD,EAAEuC,QAAUpB,EAASqB,WAAasB,EAAQH,YAAY,IACvDzB,EACFmB,EAAKnD,QAAQgD,GACVlD,EAAE0C,QAAUvB,EAASwB,UAAYmB,EAAQH,YAAY,IAAMzB,EAC9DlB,EAAOU,SAASuB,EAAIhC,EAAWf,QAAQ+C,EAAII,EAAKnD,QAAQ+C,EACxDjC,EAAOU,SAASwB,EAAIjC,EAAWf,QAAQgD,EAAIG,EAAKnD,QAAQgD,OACnD,GAAwB,IAApBK,EAASU,OAAc,CAChC,IAAMH,EAAUP,EAASW,QAAO,SAACC,GAAD,OAAOA,EAAEV,KAAOzD,EAAE0D,aAAW,GAC7DI,EAAQb,EAAIjD,EAAEuC,QAAUpB,EAASqB,WACjCsB,EAAQZ,EAAIlD,EAAE0C,QAAUvB,EAASwB,UAEjC,IAAMyB,EAAIb,EAAS,GACbc,EAAId,EAAS,GACbe,EAAU,CACdxC,KAAKC,IAAIqC,EAAET,YAAY,GAAIU,EAAEV,YAAY,IACzC7B,KAAKC,IAAIqC,EAAET,YAAY,GAAIU,EAAEV,YAAY,KAErCY,EAAU,CACdzC,KAAKE,IAAIoC,EAAET,YAAY,GAAIU,EAAEV,YAAY,IACzC7B,KAAKE,IAAIoC,EAAET,YAAY,GAAIU,EAAEV,YAAY,KAErC5B,EAAM,CAACD,KAAKC,IAAIqC,EAAEnB,EAAGoB,EAAEpB,GAAInB,KAAKC,IAAIqC,EAAElB,EAAGmB,EAAEnB,IAC3ClB,EAAM,CAACF,KAAKE,IAAIoC,EAAEnB,EAAGoB,EAAEpB,GAAInB,KAAKE,IAAIoC,EAAElB,EAAGmB,EAAEnB,IAC3CsB,EAAW,CACfC,KAAM,CACJH,EAAQ,IAAMC,EAAQ,GAAKD,EAAQ,IAAM,EACzCA,EAAQ,IAAMC,EAAQ,GAAKD,EAAQ,IAAM,GAE3CpE,QAAS,CACP6B,EAAI,IAAMC,EAAI,GAAKD,EAAI,IAAM,EAC7BA,EAAI,IAAMC,EAAI,GAAKD,EAAI,IAAM,IAM3BG,EADJ,EAAIJ,KAAKK,IAAKnB,EAAOoB,IAAMN,KAAKO,GAAM,KAAOpB,EAAWf,QAAQ+B,EAChC1B,EAE5BmE,EAAU,EACbF,EAAStE,QAAQ,GAAKsE,EAASC,KAAK,IAAMvC,GAC1CsC,EAAStE,QAAQ,GAAKsE,EAASC,KAAK,IAAMvC,GAGvCyC,EAAe,IAAIzD,IACzByD,EAAa1B,EAAIhC,EAAWf,QAAQ+C,EAAIyB,EAAQ,GAChDC,EAAazB,EAAIjC,EAAWf,QAAQgD,EAAIwB,EAAQ,GAEhD,IAAME,EAAW9C,KAAK+C,KACpB/C,KAAKgD,IAAIV,EAAET,YAAY,GAAKU,EAAEV,YAAY,GAAI,GAC5C7B,KAAKgD,IAAIV,EAAET,YAAY,GAAKU,EAAEV,YAAY,GAAI,IAK5ChC,GAHWG,KAAK+C,KACpB/C,KAAKgD,IAAIV,EAAEnB,EAAIoB,EAAEpB,EAAG,GAAKnB,KAAKgD,IAAIV,EAAElB,EAAImB,EAAEnB,EAAG,IAEnB0B,GAAYA,EAAW,EAE7CtC,EAAOkC,EAAStE,QAAQ,GAAKoB,EAAQ,EACrCmB,IAAS+B,EAAStE,QAAQ,GAAKK,EAAS,GACxCqC,EAAYN,EAAOJ,EACnBW,EAAYJ,EAAOP,EAEnBL,EAAWC,KAAKC,IACpB,GACAD,KAAKE,IAAI,EAAGf,EAAWf,QAAQ+B,EAAIN,IAK/BmB,EADJ,EAAIhB,KAAKK,IAAKnB,EAAOoB,IAAMN,KAAKO,GAAM,KAAOR,EACPtB,EAKlCwC,EAHYT,EAAOQ,EAGCF,EACpBI,EAHYP,EAAOK,EAGCD,EAE1B7B,EAAOU,SAASuB,EAAI0B,EAAa1B,EAAIF,EACrC/B,EAAOU,SAASwB,EAAIyB,EAAazB,EAAIF,EACrChC,EAAOU,SAASO,EAAIJ,IAIlBkD,EAAkB,SAAC/E,GACvBA,EAAEqB,iBAEFkC,EAASyB,OACPzB,EAAS0B,WAAU,SAACd,GAAD,OAAOA,EAAEV,KAAOzD,EAAE0D,aACrC,GALyC,oBAOrBH,GAPqB,IAO3C,2BAAgC,CAAC,IAAtBO,EAAqB,QAC9BA,EAAQH,YAAc,CAACG,EAAQb,EAAGa,EAAQZ,IARD,8BAW3CjC,EAAWf,QAAQuB,KAAKT,EAAOU,UAE/BP,EAAS+D,sBAAsBlF,EAAE0D,YAGnC,GAAIvC,EAIF,OAHAA,EAAShB,iBAAiB,cAAeJ,GACzCoB,EAAShB,iBAAiB,cAAe6D,GACzC7C,EAAShB,iBAAiB,YAAa4E,GAChC,WACL5D,EAASf,oBAAoB,cAAeL,GAC5CoB,EAASf,oBAAoB,cAAe4D,GAC5C7C,EAASf,oBAAoB,YAAa2E,MAG7C,CAAChE,EAAaC,K,QCxNNmE,EAAc,ICSrBC,EAAW,GA+OFC,EA7OE,SAAC,GAwBX,IAvBLrE,EAuBI,EAvBJA,OACAsE,EAsBI,EAtBJA,IACAC,EAqBI,EArBJA,MACAC,EAoBI,EApBJA,WACAC,EAmBI,EAnBJA,aACAC,EAkBI,EAlBJA,oBACAC,EAiBI,EAjBJA,YACAC,EAgBI,EAhBJA,SACAC,EAeI,EAfJA,QACAC,EAcI,EAdJA,UACAC,EAaI,EAbJA,SAcMC,EAAiBnG,iBAAiC,MAClDoG,EAAiBpG,iBAAiC,MAClDqG,EAAWrG,iBAAgC,MACjD,EAAsCsG,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAEAvG,qBAAU,WACRkB,EAAOU,SAASO,EAAI,EAEpB,IAAMqE,EAASb,EAAavF,SAAWqG,SAASC,cAAc,UAC9Df,EAAavF,QAAUoG,EACvBA,EAAOhF,MAAQ,GACfgF,EAAO/F,OAAS,GAEhB,IAAMkG,EAAgB,IAAIvF,IAAoBoF,GAC9CZ,EAAoBxF,QAAUuG,EAE9B,IAAMC,EAAW,IAAIxF,IAAoB,EAAG,GACtCyF,EAAW,IAAIzF,IAAwB,CAAE0F,IAAKH,IAC9CI,EAAQ,IAAI3F,IAAWwF,EAAUC,GACvChB,EAAYzF,QAAU2G,EACtBtB,EAAMuB,IAAID,GAEV7F,EAAOU,SAASO,EAAI,IACnB,IAEHnC,qBAAU,WACJiG,GACFgB,EAAUhB,KAEX,CAACA,IAEJ,IAAMiB,EAAanH,iBAAO,GACpBkH,EAAY,SAACE,GACjBD,EAAW9G,UACX,IAAMgH,EAAQ,IAAIC,MACZ1D,EAAK2D,cACXxB,EAASnC,GACTyD,EAAMG,OAAS,WACb,IAAMC,EAAUN,EAAW9G,QACrBqH,EAAOzF,KAAK0F,MAAMN,EAAM5F,MAAQ8D,GAChCqC,EAAO3F,KAAK0F,MAAMN,EAAM3G,OAAS6E,GACjC9D,EAAQiG,EAAOnC,EACf7E,EAASkH,EAAOrC,EACtBiB,EAAe,GAAD,OAAI/E,EAAJ,YAAaf,IAE3B,IAAMsG,EAAQlB,EAAYzF,QAC1B2G,EAAMa,MAAMzE,EAAIiE,EAAM5F,MAAQ6D,EAC9B0B,EAAMa,MAAMxE,EAAIgE,EAAM3G,OAAS4E,EAE/B,IAAMwC,EACJ3B,EAAe9F,SAAWqG,SAASC,cAAc,UACnDR,EAAe9F,QAAUyH,EACzBA,EAAYrG,MAAQA,EACpBqG,EAAYpH,OAASA,EACToH,EAAYC,WAAW,MAC/BC,UAAUX,EAAO,EAAG,EAAGS,EAAYrG,MAAOqG,EAAYpH,QAE1D,IAAMuH,EAAiB,GACjBC,EACJ9B,EAAe/F,SAAWqG,SAASC,cAAc,UACnDuB,EAAYzG,MAAe,EAAPiG,EACpBQ,EAAYxH,OAAgB,EAAPkH,EACrB,IAAMO,EAAMD,EAAYH,WAAW,MACnCI,EAAIH,UAAUX,EAAO,EAAG,EAAGa,EAAYzG,MAAOyG,EAAYxH,QAE1D,IAAM+F,EAASb,EAAavF,QAC5BoG,EAAOhF,MAAQA,EACfgF,EAAO/F,OAASA,EAChBmF,EAAoBxF,QAAW,IAAIgB,IAAoBoF,GACtDO,EAAMF,SAA+BC,IAAMlB,EAAoBxF,QAChE,IAAM+H,EAAM3B,EAAOsB,WAAW,MAC9BK,EAAIC,UAAY,OAChBD,EAAIE,SAAS,EAAG,EAAG7B,EAAOhF,MAAOgF,EAAO/F,QAExC,IACM6H,EAAQC,MAAMd,EAAOE,GACxBa,KAAK,GACL1B,KAAI,SAAC2B,EAAGC,GAAJ,OAAUA,MACA,SAAXC,IACJ,IAAK,IAAIpE,EAAI,EAAGA,EALA,GAKeA,IAAK,CAClC,IAAMmE,EAAIJ,EAAMM,QAChB,QAAUC,IAANH,EAAiB,CAMnB,IALA,IAAMI,EAAIJ,EAAIjB,EACRsB,EAAI/G,KAAKgH,MAAMN,EAAIjB,GAEnBwB,EAAOf,EAAIgB,aAAiB,EAAJJ,EAAW,EAAJC,EAAO,EAAG,GAAGE,KAC9CE,EAAO,GACFC,EAAI,EAAGA,EAAI,GAAOA,GAAK,EAAG,CACjC,IAAMC,EAAQ,CAACJ,EAAKG,GAAIH,EAAKG,EAAI,GAAIH,EAAKG,EAAI,IAC9CD,EAAKzF,KAAK2F,GAEZrB,EAAQtE,KAAKyF,GAEbhB,EAAIJ,UACFX,EACA0B,EAAIxD,EACJyD,EAAIzD,EACJA,EACAA,EACAwD,EAAIxD,EACJyD,EAAIzD,EACJA,EACAA,GAEFM,EAAoBxF,QAASkJ,aAAc,EACtB,IAAjBhB,EAAMnE,SACRoF,QAAQC,IAAI,WACZ9D,EAAW,CAAE/B,KAAI8D,OAAME,OAAMK,aAGvByB,KAANlF,GAAuB2C,EAAW9G,UAAYoH,GAChDkC,YAAW,WACTf,MACC,IAITA,IAEFvB,EAAMD,IAAMA,GAGdnH,qBAAU,WACRiH,EAAU,sBACT,IAEHjH,qBAAU,WAAO,SACA2J,IADD,2EACd,kCAAArF,EAAA,oEACmBsF,KAAKC,OADxB,+DACWC,EADX,SAEaC,KAAKC,QAAQ,SAAW,GAFrC,qDAKQ7C,EAAM8C,IAAIC,gBAAgBJ,GAC9B7C,EAAUE,GANd,uMADc,sBAWd,OADAf,EAAShG,QAASC,iBAAiB,SAAUsJ,GACtC,WACLvD,EAAShG,QAASE,oBAAoB,SAAUqJ,MAEjD,IAEH,IAAMQ,EAAapK,iBAA8B,MAUjD,OATAiB,EAAamJ,EAAYjJ,GACzBoC,EAAc6G,EAAYjJ,GAE1BlB,qBAAU,WACJ+F,GACFQ,EAAe,GAAD,OAAIR,EAAQ0B,KAAOnC,EAAnB,YAA+BS,EAAQ4B,KAAOrC,MAE7D,CAACS,IAGF,sBACExF,IAAK4J,EACLpJ,UAAU,UACVqJ,cAAe,kBAAOpE,EAAU5F,QAAU,GAC1CT,MAAO,CACLiC,SAAU,WACVyI,OAAQ7E,EAAI8E,IACZC,KAAM/E,EAAI+E,KACV/I,MAAOgE,EAAIhE,MACXf,OAAQ+E,EAAI/E,OACZ+J,MAAO,OACPC,OAAQ,GAXZ,UAcE,qBACE9K,MAAO,CACLiB,QAAS,YAFb,iBAOA,uBACEmJ,KAAK,OACLxJ,IAAK6F,EACLsE,OAAO,kBACP/K,MAAO,CAAEgL,QAAS,UAEpB,sBACEhL,MAAO,CACLiC,SAAU,WACV2I,KAAM,EACNK,MAAO,EACPP,OAAQ,EACRM,QAAS,OACTE,eAAgB,gBAChBC,WAAY,SACZlK,QAAS,IATb,UAYE,qBAAKG,UAAU,UAAf,SAA0BuF,IAC1B,cAAC,EAAD,CACE5G,KAAK,SACLG,MAAM,eACND,QAAS,WACOwG,EAAShG,QACjB2K,cACJ,IAAIC,aAAa,QAAS,CACxBC,SAAS,EACTC,YAAY,EACZC,KAAMC,oBCrOhB9F,EAAW,GAwRF+F,EAtRE,SAAC,GAgCX,IA/BLnK,EA+BI,EA/BJA,OACAsE,EA8BI,EA9BJA,IACAC,EA6BI,EA7BJA,MACA6F,EA4BI,EA5BJA,WACAC,EA2BI,EA3BJA,aACAC,EA0BI,EA1BJA,SACAC,EAyBI,EAzBJA,oBACAC,EAwBI,EAxBJA,YACAC,EAuBI,EAvBJA,SACAC,EAsBI,EAtBJA,QACA5F,EAqBI,EArBJA,UACAC,EAoBI,EApBJA,SACAF,EAmBI,EAnBJA,QACA8F,EAkBI,EAlBJA,MACAC,EAiBI,EAjBJA,MAkBM1F,EAAWrG,iBAAgC,MAC3CoG,EAAiBpG,iBAAiC,MAClDmG,EAAiBnG,iBAAiC,MACxD,EAAsCsG,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAEAvG,qBAAU,WACRkB,EAAOU,SAASO,EAAI,EAEpB,IAAMqE,EAAS+E,EAAanL,SAAWqG,SAASC,cAAc,UAC9D6E,EAAanL,QAAUoG,EACvBA,EAAOhF,MAAQ,GACfgF,EAAO/F,OAAS,GAChB,IAAM0H,EAAM3B,EAAOsB,WAAW,MAC9BK,EAAIC,UAAY,OAChBD,EAAIE,SAAS,EAAG,EAAG7B,EAAOhF,MAAOgF,EAAO/F,QAExC,IAAMkG,EAAgB,IAAIvF,IAAoBoF,GAC9CiF,EAAoBrL,QAAUuG,EAE9B,IAAMC,EAAW,IAAIxF,IAAoB,EAAG,GACtCyF,EAAW,IAAIzF,IAAwB,CAAE0F,IAAKH,IAC9CI,EAAQ,IAAI3F,IAAWwF,EAAUC,GACvC6E,EAAYtL,QAAU2G,EACtBtB,EAAMuB,IAAID,GAEV7F,EAAOU,SAASO,EAAI,IACnB,IAEHnC,qBAAU,WACJiG,GACFgB,EAAUhB,KAEX,CAACA,IAEJ,IAAMiB,EAAanH,iBAAO,GACpBkH,EAAY,SAACE,GACjBD,EAAW9G,UACX,IAAMgH,EAAQ,IAAIC,MACZ1D,EAAK2D,cACXqE,EAAShI,GACTyD,EAAMG,OAAS,WACb,IAAMC,EAAUN,EAAW9G,QACrBqH,EAAOzF,KAAK0F,MAAMN,EAAM5F,MAAQ8D,GAChCqC,EAAO3F,KAAK0F,MAAMN,EAAM3G,OAAS6E,GACjC9D,EAAQiG,EAAOnC,EACf7E,EAASkH,EAAOrC,EACtBiB,EAAe,GAAD,OAAI/E,EAAJ,YAAaf,IAE3B,IAAMsG,EAAQ2E,EAAYtL,QAC1B2G,EAAMa,MAAMzE,EAAIiE,EAAM5F,MAAQ6D,EAC9B0B,EAAMa,MAAMxE,EAAIgE,EAAM3G,OAAS4E,EAE/B,IAAMwC,EACJ3B,EAAe9F,SAAWqG,SAASC,cAAc,UACnDR,EAAe9F,QAAUyH,EACzBA,EAAYrG,MAAQA,EACpBqG,EAAYpH,OAASA,EACToH,EAAYC,WAAW,MAC/BC,UAAUX,EAAO,EAAG,EAAGS,EAAYrG,MAAOqG,EAAYpH,QAE1D,IAAMuH,EAAiB,GACjBC,EACJ9B,EAAe/F,SAAWqG,SAASC,cAAc,UACnDuB,EAAYzG,MAAe,EAAPiG,EACpBQ,EAAYxH,OAAgB,EAAPkH,EACrB,IAAMO,EAAMD,EAAYH,WAAW,MACnCI,EAAIH,UAAUX,EAAO,EAAG,EAAGa,EAAYzG,MAAOyG,EAAYxH,QAE1D,IAAM+F,EAAS+E,EAAanL,QAC5BoG,EAAOhF,MAAQA,EACfgF,EAAO/F,OAASA,EAChBgL,EAAoBrL,QAAW,IAAIgB,IAAoBoF,GACtDO,EAAMF,SAA+BC,IAAM2E,EAAoBrL,QAChE,IAAM+H,EAAM3B,EAAOsB,WAAW,MAC9BK,EAAIC,UAAY,OAChBD,EAAIE,SAAS,EAAG,EAAG7B,EAAOhF,MAAOgF,EAAO/F,QAExC,IAAM6H,EAAQC,MAAMd,EAAOE,GACxBa,KAAK,GACL1B,KAAI,SAAC2B,EAAGC,GAAJ,OAAUA,MAEA,SAAXC,IACJ,IAAK,IAAIpE,EAAI,EAAGA,EAFA,GAEeA,IAAK,CAClC,IAAMmE,EAAIJ,EAAMM,QAChB,QAAUC,IAANH,EAAiB,CAMnB,IALA,IAAMI,EAAIJ,EAAIjB,EACRsB,EAAI/G,KAAKgH,MAAMN,EAAIjB,GAEnBwB,EAAOf,EAAIgB,aAAiB,EAAJJ,EAAW,EAAJC,EAAO,EAAG,GAAGE,KAC9CE,EAAO,GACFC,EAAI,EAAGA,EAAI,GAAOA,GAAK,EAAG,CACjC,IAAMC,EAAQ,CAACJ,EAAKG,GAAIH,EAAKG,EAAI,GAAIH,EAAKG,EAAI,IAC9CD,EAAKzF,KAAK2F,GAEZrB,EAAQtE,KAAKyF,GAEbhB,EAAIJ,UACFX,EACA0B,EAAIxD,EACJyD,EAAIzD,EACJA,EACAA,EACAwD,EAAIxD,EACJyD,EAAIzD,EACJA,EACAA,GAEFmG,EAAoBrL,QAASkJ,aAAc,EACtB,IAAjBhB,EAAMnE,QACRmH,EAAW,CAAE3H,KAAI8D,OAAME,OAAMK,YAGvByB,KAANlF,GAAuB2C,EAAW9G,UAAYoH,GAChDkC,YAAW,WACTf,MACC,IAITA,IAEFvB,EAAMD,IAAMA,GAGdnH,qBAAU,WACRiH,EAAU,uBACT,IAEHjH,qBAAU,WAAO,SACA2J,IADD,2EACd,kCAAArF,EAAA,oEACmBsF,KAAKC,OADxB,+DACWC,EADX,SAEaC,KAAKC,QAAQ,SAAW,GAFrC,qDAKQ7C,EAAM8C,IAAIC,gBAAgBJ,GAC9B7C,EAAUE,GANd,uMADc,sBAWd,OADAf,EAAShG,QAASC,iBAAiB,SAAUsJ,GACtC,WACLvD,EAAShG,QAASE,oBAAoB,SAAUqJ,MAEjD,IAEH3J,qBAAU,WACJ4L,GACFrF,EAAe,GAAD,OAAIqF,EAAQnE,KAAOnC,EAAnB,YAA+BsG,EAAQjE,KAAOrC,MAE7D,CAACsG,IAEJ,IAAMzB,EAAapK,iBAA8B,MAIjD,OAHAiB,EAAamJ,EAAYjJ,GACzBoC,EAAc6G,EAAYjJ,GAGxB,sBACEX,IAAK4J,EACLpJ,UAAU,UACVpB,MAAO,CACLiC,SAAU,WACVyI,OAAQ7E,EAAI8E,IACZC,KAAM/E,EAAI+E,KACV/I,MAAOgE,EAAIhE,MACXf,OAAQ+E,EAAI/E,OACZ+J,MAAO,OACPuB,QAAS,kBACTtB,OAAQ,GAEVL,cAAe,kBAAOpE,EAAU5F,QAAU,GAb5C,UAeE,qBACET,MAAO,CACLiB,QAAS,YAFb,iBAOA,uBACEmJ,KAAK,OACLxJ,IAAK6F,EACLsE,OAAO,kBACP/K,MAAO,CAAEgL,QAAS,UAEpB,qBACEhL,MAAO,CACLiC,SAAU,WACV2I,KAAM,EACNK,MAAO,EACPN,IAAK,EACLK,QAAS,OACTE,eAAgB,MAChBC,WAAY,SACZlK,QAAS,MAGb,sBACEjB,MAAO,CACLiC,SAAU,WACV2I,KAAM,EACNK,MAAO,EACPP,OAAQ,EACRM,QAAS,OACTE,eAAgB,gBAChBC,WAAY,SACZlK,QAAS,IATb,UAYE,qBAAKG,UAAU,UAAf,SAA0BuF,IAC1B,sBAAK3G,MAAO,CAAEgL,QAAS,OAAQqB,IAAK,IAApC,UACGjG,GACDA,EAAQpC,KAAOkI,GACfD,GACAA,EAAQjI,KAAOmI,EACb,cAAC,EAAD,CACEpM,KAAK,SACLG,MAAM,mBACNF,MAAO,CACLsM,gBAAiB,gBACjBC,UAAW,iBAEbtM,QAAS,WACP4L,OAGF,KACJ,cAAC,EAAD,CACE9L,KAAK,SACLG,MAAM,eACND,QAAS,WACOwG,EAAShG,QACjB2K,cACJ,IAAIoB,WAAW,QAAS,CACtBlB,SAAS,EACTC,YAAY,EACZC,KAAMC,uBC9QlB9F,EAAW,GAiNF8G,EA/ME,SAAC,GAoBX,IAnBLlL,EAmBI,EAnBJA,OACAsE,EAkBI,EAlBJA,IACAC,EAiBI,EAjBJA,MACAM,EAgBI,EAhBJA,QACA6F,EAeI,EAfJA,QACAjG,EAcI,EAdJA,aACAmG,EAaI,EAbJA,MACAD,EAYI,EAZJA,MACA7F,EAWI,EAXJA,UAYMqG,EAAYtM,iBAAiC,MAC7CuM,EAAmBvM,iBAAmC,MACtDwM,EAAWxM,iBAA0B,MAC3C,EAAsCsG,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA4BF,oBAAS,GAArC,mBAAOmG,EAAP,KAAeC,EAAf,KAEAzM,qBAAU,WACRkB,EAAOU,SAASO,EAAI,EAEpB,IAAMqE,EAAS6F,EAAUjM,SAAWqG,SAASC,cAAc,UAC3D2F,EAAUjM,QAAUoG,EACpBA,EAAOhF,MAAQ,GACfgF,EAAO/F,OAAS,GAEhB,IAAMkG,EAAgB,IAAIvF,IAAoBoF,GAC9C8F,EAAiBlM,QAAUuG,EAE3B,IAAMC,EAAW,IAAIxF,IAAoB,EAAG,GACtCyF,EAAW,IAAIzF,IAAwB,CAAE0F,IAAKH,IAC9CI,EAAQ,IAAI3F,IAAWwF,EAAUC,GACvC0F,EAASnM,QAAU2G,EACnBtB,EAAMuB,IAAID,GAEV7F,EAAOU,SAASO,EAAI,IACnB,IAEH,IAAM+E,EAAanH,iBAAO,GAC1BC,qBAAU,WAER,GADAyM,GAAU,GACN1G,GAAW6F,EAAS,CACtB1E,EAAW9G,UACXmJ,QAAQC,IAAI,SACZ,IAAMhI,EAAQoK,EAAQnE,KAAOnC,EACvB7E,EAASmL,EAAQjE,KAAOrC,EAC9BiB,EAAe,GAAD,OAAI/E,EAAJ,YAAaf,IAE3B,IAAMsG,EAAQwF,EAASnM,QACvB2G,EAAMa,MAAMzE,EAAI3B,EAAQ6D,EACxB0B,EAAMa,MAAMxE,EAAI3C,EAAS4E,EAEzB,IAAMmB,EAAS6F,EAAUjM,QACzBoG,EAAOhF,MAAQA,EACfgF,EAAO/F,OAASA,EAChB,IAAM0H,EAAM3B,EAAOsB,WAAW,MAC9BK,EAAIC,UAAY,OAChBD,EAAIE,SAAS,EAAG,EAAG7G,EAAOf,GACzB8L,EAASnM,QAASyG,SAA+BC,IAAM,IAAI4F,IAC1DlG,GAED+F,EAASnM,QAASyG,SAA+ByC,aAAc,EAEhE,IAAMhB,EAAQC,MAAMqD,EAAQnE,KAAOmE,EAAQjE,MACxCa,KAAK,GACL1B,KAAI,SAAC2B,EAAGC,GAAJ,OAAUA,KAEXlB,EAAUN,EAAW9G,SAEV,SAAXuI,IACJ,GACEzB,EAAW9G,UAAYoH,GACvBqE,IAAU9F,EAAQpC,IAClBmI,IAAUF,EAAQjI,GAElB,IAAK,IAAIY,EAAI,EAAGA,EAPF,EAOiBA,IAAK,CAClC,IAAMmE,EAAIJ,EAAMM,QAChB,QAAUC,IAANH,EAAiB,CAMnB,IALA,IAAMI,EAAIJ,EAAIkD,EAAQnE,KAChBsB,EAAI/G,KAAKgH,MAAMN,EAAIkD,EAAQnE,MAC7BxF,EAAM0K,IACNC,GAAY,EACVC,EAAYjB,EAAQ5D,QAAQU,GACzBU,EAAI,EAAGA,EAAIrD,EAAQ0B,KAAO1B,EAAQ4B,KAAMyB,IAAK,CAGpD,IAFA,IAAM0D,EAAY/G,EAAQiC,QAAQoB,GAC9B2D,EAAU,EAFsC,WAG3CC,GACP,IAAMC,EAAcH,EAAUE,GAMxBE,EALQL,EAAUG,GAELlG,KAAI,SAACqG,EAAGC,GAAJ,OACrBpL,KAAKqL,IAAIF,EAAIF,EAAYG,OAEVE,QAAO,SAAChJ,EAAWC,GAAZ,OAA0BD,EAAIC,IAAG,GACzDwI,GAAWG,GARJF,EAAI,EAAGA,EAAI,EAAGA,IAAM,EAApBA,GAULD,EAAU9K,IACZA,EAAM8K,EACNH,EAAWxD,GAIf,IAAMmE,EAAKX,EAAW7G,EAAQ0B,KACxB+F,EAAKxL,KAAKgH,MAAM4D,EAAW7G,EAAQ0B,MACzCU,EAAIJ,UACFpC,EAAavF,QACbmN,EAAKjI,EACLkI,EAAKlI,EACLA,EACAA,EACAwD,EAAIxD,EACJyD,EAAIzD,EACJA,EACAA,GAGAiH,EAASnM,QAASyG,SAClBC,IAAKwC,aAAc,EACA,IAAjBhB,EAAMnE,SACRoF,QAAQC,IAAI,QACZiD,GAAU,IAGJhD,IAANlF,GACFmF,YAAW,WACTf,MACC,IAKXA,MAED,CAAC5C,EAAS6F,EAASC,EAAOC,IAE7B,IAAM3B,EAAapK,iBAA8B,MAIjD,OAHAiB,EAAamJ,EAAYjJ,GACzBoC,EAAc6G,EAAYjJ,GAGxB,qBACEX,IAAK4J,EACLpJ,UAAU,UACVqJ,cAAe,kBAAOpE,EAAU5F,QAAU,GAC1CT,MAAO,CACLiC,SAAU,WACVyI,OAAQ7E,EAAI8E,IACZC,KAAM/E,EAAI+E,KACV/I,MAAOgE,EAAIhE,MACXf,OAAQ+E,EAAI/E,OACZ+J,MAAO,QAVX,SAaE,sBACE7K,MAAO,CACLiC,SAAU,WACV2I,KAAM,EACNK,MAAO,EACPP,OAAQ,EACRM,QAAS,OACTE,eAAgB,gBAChBC,WAAY,SACZlK,QAAS,GACTH,OAAQ,IAVZ,UAaE,qBAAKM,UAAU,UAAf,SAA0BuF,IACzBkG,EACC,cAAC,EAAD,CACE9M,KAAK,SACLG,MAAM,iBACND,QAAS,WACPyM,EAAUjM,QAASqN,OAAnB,uCAA0B,WAAOC,GAAP,iBAAApJ,EAAA,sDAClBqJ,EAAW1D,IAAIC,gBAAgBwD,IACjCE,EAAOnH,SAASC,cAAc,MAC7BmH,aACH,WACA,UAAY7L,KAAK0F,OAAM,IAAIoG,MAAOC,UAAY,KAAQ,QAExDH,EAAKC,aAAa,OAAQF,GAC1BC,EAAK7C,cACH,IAAIoB,WAAJ,QAAwB,CACtBlB,SAAS,EACTC,YAAY,EACZC,KAAMC,UAZc,2CAA1B,0DAmBJ,qBAAKzL,MAAO,CAAE6K,MAAO,QAArB,iCC8UKwD,MAjgBf,WACE,MAA4B3H,oBAAS,GAArC,mBAAOmG,EAAP,KAAeC,EAAf,KACMJ,EAAYtM,iBAA0B,MACtCkO,EAAYlO,iBAAoB,IACtC,EAA8BsG,mBAAsB,IAApD,mBAAO6H,EAAP,KAAgBC,EAAhB,KACA,EAA8B9H,mBAA6B,MAA3D,mBAAON,EAAP,KAAgBL,EAAhB,KACA,EAA8BW,mBAA6B,MAA3D,mBAAOuF,EAAP,KAAgBN,EAAhB,KACA,EAA0BjF,mBAAwB,MAAlD,mBAAOwF,EAAP,KAAc/F,EAAd,KACA,EAA0BO,mBAAwB,MAAlD,mBAAOyF,EAAP,KAAcH,EAAd,KACA,EAAkCtF,oBAAS,GAA3C,mBAAO+H,EAAP,KAAkBC,EAAlB,KACM1I,EAAe5F,iBAA0B,MACzCwL,EAAexL,iBAA0B,MACzCuO,EAAYvO,iBAAsB,IAClCwO,EAAaxO,iBAAkC,IAC/CkB,EAAclB,iBAAmC,MACjD6F,EAAsB7F,iBAA6B,MACnD0L,EAAsB1L,iBAA6B,MACnD8F,EAAc9F,iBAA0B,MACxC2L,EAAc3L,iBAA0B,MACxCyO,EAAgBzO,iBAAiC,MACjDiG,EAAYjG,iBAAe,GACjC,EAAsCsG,mBAAwB,MAA9D,mBAAOoI,EAAP,KAAoBC,GAApB,KACA,GAAsCrI,mBAAwB,MAA9D,qBAAOsI,GAAP,MAAoBC,GAApB,MACMC,GAAa9O,iBAAiB,IAE9B+O,GAAY,WAChB,IAAMtN,EAAQ4J,OAAO2D,WACftO,EAAS2K,OAAO4D,YAEpBf,EAAU7N,QADRoB,EAAQf,EACU,CAClB,CACE8J,KAAM,EACND,IAAK7J,EAAS,EACde,MAAOA,EAAQ,EACff,OAAQA,EAAS,GAEnB,CACE8J,KAAM,EACND,IAAK,EACL9I,MAAOA,EAAQ,EACff,OAAQA,EAAS,GAEnB,CACE8J,KAAM/I,EAAQ,EACd8I,IAAK,EACL9I,MAAOA,EAAQ,EACff,OAAQA,IAIQ,CAClB,CACE8J,KAAM,EACND,IAAK7J,EAAS,EACde,MAAOA,EAAQ,EACff,OAAQA,EAAS,GAEnB,CACE8J,KAAM/I,EAAQ,EACd8I,IAAK7J,EAAS,EACde,MAAOA,EAAQ,EACff,OAAQA,EAAS,GAEnB,CACE8J,KAAM,EACND,IAAK,EACL9I,MAAOA,EACPf,OAAQA,EAAS,IAIvB8I,QAAQC,IAAI,eAEdsF,KAEA,IAAMG,GAAalP,iBAA2BgG,GACxCmJ,GAAanP,iBAA2B6L,GAgT9C,OA/SA5L,qBAAU,WACRiP,GAAW7O,QAAU2F,EACrBmJ,GAAW9O,QAAUwL,IACpB,CAAC7F,EAAS6F,IA4Cb5L,qBAAU,WACR,MAAiCiO,EAAU7N,QAA3C,mBAAO+O,EAAP,KAAeC,EAAf,KAAuBC,EAAvB,KAEMC,EAAY,IAAIlO,IACpB,GACA+N,EAAO3N,MAAQ2N,EAAO1O,OACtB,GACA,KAEI8O,EAAY,IAAInO,IACpB,GACAgO,EAAO5N,MAAQ4N,EAAO3O,OACtB,GACA,KAEI+O,EAAY,IAAIpO,IACpB,GACAiO,EAAO7N,MAAQ6N,EAAO5O,OACtB,GACA,KAEF8N,EAAWnO,QAAU,CAACkP,EAAWC,EAAWC,GAE5C,IAAMnO,EAAW,IAAID,IAAoB,CACvCoF,OAAQ6F,EAAUjM,UAEpBa,EAAYb,QAAUiB,EACtBA,EAASoO,QAAQrE,OAAO2D,WAAY3D,OAAO4D,aAC3C3N,EAASqO,cAActE,OAAOuE,kBAE9B,IAAMC,EAAW,IAAIxO,IACfyO,EAAW,IAAIzO,IACf0O,EAAW,IAAI1O,IACrBkN,EAAUlO,QAAU,CAACwP,EAAUC,EAAUC,GAGvC,IAAMlJ,EAAW,IAAIxF,IAAoB,EAAG,GACtCyF,EAAW,IAAIzF,IAAwB,CAAEoJ,MAAO,IAEhDzD,EAAQ,IAAI3F,IAAWwF,EAAUC,GACvCgJ,EAAS7I,IAAID,GAGb,IAAMH,EAAW,IAAIxF,IAAoB,EAAG,GACtCyF,EAAW,IAAIzF,IAAwB,CAAEoJ,MAAO,IAChDzD,EAAQ,IAAI3F,IAAWwF,EAAUC,GACvCiJ,EAAS9I,IAAID,GAGfuI,EAAU1N,SAASO,EAAI,EACvBoN,EAAU3N,SAASO,EAAI,EACvBqN,EAAU5N,SAASO,EAAI,EAEvBd,EAAS0O,WAAY,EAErBtD,GAAU,KACT,IAEHzM,qBAAU,YACQ,SAAVgQ,IACJ,IAAM3O,EAAWJ,EAAYb,QAC7BiB,EAAS4O,QAET,MAAiChC,EAAU7N,QAA3C,mBAAO+O,EAAP,KAAeC,EAAf,KAAuBC,EAAvB,KACA,EAA0Cd,EAAWnO,QAArD,mBAAOkP,EAAP,KAAkBC,EAAlB,KAA6BC,EAA7B,KACA,EAAuClB,EAAUlO,QAAjD,mBAAOwP,EAAP,KAAiBC,EAAjB,KAA2BC,EAA3B,KAEUvF,EAA6B4E,EAA7B5E,KAAMD,EAAuB6E,EAAvB7E,IAAK9I,EAAkB2N,EAAlB3N,MAAOf,EAAW0O,EAAX1O,OAC1BY,EAAS6O,WAAW3F,EAAMD,EAAK9I,EAAOf,GACtCY,EAAS8O,YAAY5F,EAAMD,EAAK9I,EAAOf,GACvCY,EAAS+O,OAAOR,EAAUN,GAG1B,IAAQ/E,EAA6B6E,EAA7B7E,KAAMD,EAAuB8E,EAAvB9E,IAAK9I,EAAkB4N,EAAlB5N,MAAOf,EAAW2O,EAAX3O,OAC1BY,EAAS6O,WAAW3F,EAAMD,EAAK9I,EAAOf,GACtCY,EAAS8O,YAAY5F,EAAMD,EAAK9I,EAAOf,GACvCY,EAAS+O,OAAOP,EAAUN,GAG1B,IAAQhF,EAA6B8E,EAA7B9E,KAAMD,EAAuB+E,EAAvB/E,IAAK9I,EAAkB6N,EAAlB7N,MAAOf,EAAW4O,EAAX5O,OAC1BY,EAAS6O,WAAW3F,EAAMD,EAAK9I,EAAOf,GACtCY,EAAS8O,YAAY5F,EAAMD,EAAK9I,EAAOf,GACvCY,EAAS+O,OAAON,EAAUN,GAE5Ba,sBAAsBL,GAExBA,KACC,IAEHhQ,qBAAU,WACR,IAAMsQ,EAAe,WACnBxB,KAEA,IADA,IAAMyB,EAActC,EAAU7N,QACrBsI,EAAI,EAAGA,EAAI6H,EAAYpM,OAAQuE,IAAK,CAC3C,IAAMlD,EAAM+K,EAAY7H,GAClBxH,EAASqN,EAAWnO,QAASsI,GACnCxH,EAAOsP,OAAShL,EAAIhE,MAAQgE,EAAI/E,OAChCS,EAAOuP,yBAETxP,EAAYb,QAASqP,QAAQrE,OAAO2D,WAAY3D,OAAO4D,aACvDb,EAAWoC,IAIb,OAFAD,IACAlF,OAAO/K,iBAAiB,SAAUiQ,GAC3B,kBAAMlF,OAAO9K,oBAAoB,SAAUgQ,MACjD,IAEHtQ,qBAAU,WACR,IAAM0Q,EAAO,SAACxQ,GACZ,GAAI+N,EAAU7N,QAAS,CACrB,IADqB,EACjBoH,EAAU,EADO,cAEHyG,EAAU7N,SAFP,IAErB,2BAAqC,CAAC,IAA3BoF,EAA0B,QAC7BrC,EAAIjD,EAAEuC,QACNW,EAAIgI,OAAO4D,YAAc9O,EAAE0C,QACjC,GACEO,GAAKqC,EAAI+E,MACTpH,GAAKqC,EAAI+E,KAAO/E,EAAIhE,OACpB4B,GAAKoC,EAAI8E,KACTlH,GAAKoC,EAAI8E,IAAM9E,EAAI/E,OACnB,CACAuF,EAAU5F,QAAUoH,EACpB,MAEFA,KAdmB,iCAmBzB,OADA4D,OAAO/K,iBAAiB,cAAeqQ,GAChC,kBAAMtF,OAAO9K,oBAAoB,cAAeoQ,MACtD,IAEH1Q,qBAAU,WACR,IAAM2Q,EAAU,SAACzQ,GACf,IAAMK,EAAMyF,EACZ9F,EAAEqB,iBACFrB,EAAEC,kBAHwB,oBAIPD,EAAE0Q,cAAcC,OAJT,IAI1B,2BAA0C,CAAC,IAAhC/G,EAA+B,QACxC,KAAIA,EAAKC,KAAKC,QAAQ,SAAW,GAAjC,CAGA,IAAI8G,EAAOhH,EAAKiH,YACZ5J,EAAM8C,IAAIC,gBAAgB4G,GACV,IAAhBvQ,EAAIH,QACNsO,GAAevH,GACU,IAAhB5G,EAAIH,QACbwO,GAAezH,GAEf6J,MAAM,6CAfgB,gCAoBtBC,EAAS,SAAC/Q,GACd,IAAMK,EAAMyF,EACZ9F,EAAEqB,iBACFrB,EAAEC,kBACF,IAAI2Q,EAAO5Q,EAAEgR,aAAarH,MAAM,GAC5B1C,EAAM8C,IAAIC,gBAAgB4G,GACV,IAAhBvQ,EAAIH,QACNsO,GAAevH,GACU,IAAhB5G,EAAIH,QACbwO,GAAezH,GAEf6J,MAAM,iCAIJG,EAAS,SAACjR,GACdA,EAAEC,kBACFD,EAAEqB,iBACFrB,EAAEgR,aAAaE,WAAa,QAM9B,OAHAhG,OAAO/K,iBAAiB,QAASsQ,GACjCvF,OAAO/K,iBAAiB,WAAY8Q,GACpC/F,OAAO/K,iBAAiB,OAAQ4Q,GACzB,WACL7F,OAAO9K,oBAAoB,QAASqQ,GACpCvF,OAAO9K,oBAAoB,WAAY6Q,GACvC/F,OAAO9K,oBAAoB,OAAQ2Q,MAEpC,IAGHjR,qBAAU,WACR,IAAMqR,EAAUxC,GAAWzO,QAErBkR,EAAoB,SAAC/N,GACzB,IAAMrC,EAASqN,EAAWnO,QAAS4F,EAAU5F,SAGvCgC,EADJ,EAAIJ,KAAKK,IAAKnB,EAAOoB,IAAMN,KAAKO,GAAM,KAAOrB,EAAOU,SAASO,EAC7BiJ,OAAO4D,YACzC9N,EAAOU,SAASuB,GAAK,GAAKI,EAAK,GAAKnB,EACpClB,EAAOU,SAASwB,GAAK,GAAKG,EAAK,GAAKnB,GAGhCmP,EAAe,SAACC,GACpB,IAAMtQ,EAASqN,EAAWnO,QAAS4F,EAAU5F,SACvCyB,GAAWuJ,OAAO4D,YAAcwC,GAAUpG,OAAO4D,YACvD9N,EAAOU,SAASO,EAAIH,KAAKC,IACvB,GACAD,KAAKE,IAAI,EAAGhB,EAAOU,SAASO,EAAIN,KAI9B4P,EAAc,SAACvR,GACnB,IAAIwR,EAAQxR,EAAEyR,IAAIC,cACJ,WAAVF,GACFrD,GAAa,GAED,MAAVqD,EACFH,EAAa,IACM,MAAVG,GAA2B,MAAVA,GAC1BH,GAAa,IAEVF,EAAQQ,SAASH,IACpBL,EAAQ3N,KAAKgO,IAEXL,EAAQQ,SAAS,cAAgBR,EAAQQ,SAAS,OACpDP,EAAkB,CAAC,EAAO,KAExBD,EAAQQ,SAAS,eAAiBR,EAAQQ,SAAS,OACrDP,EAAkB,EAAC,EAAQ,KAEzBD,EAAQQ,SAAS,YAAcR,EAAQQ,SAAS,QAC9C3R,EAAE4R,SACJP,EAAa,IAEbD,EAAkB,CAAC,EAAG,MAGtBD,EAAQQ,SAAS,cAAgBR,EAAQQ,SAAS,QAChD3R,EAAE4R,SACJP,GAAa,IAEbD,EAAkB,CAAC,GAAG,MAKtBS,EAAY,SAAC7R,GACjB,IAAIwR,EAAQxR,EAAEyR,IAAIC,cACZI,EAAQX,EAAQrH,QAAQ0H,IACf,IAAXM,GACFX,EAAQnM,OAAO8M,EAAO,IAM1B,OAFA5G,OAAO/K,iBAAiB,UAAWoR,GACnCrG,OAAO/K,iBAAiB,QAAS0R,GAC1B,WACL3G,OAAO9K,oBAAoB,UAAWmR,GACtCrG,OAAO9K,oBAAoB,QAASyR,MAErC,IAGD,qCACGvF,EACC,qCACG0B,EAAQ,GACP,cAAC,EAAD,CACEzI,MAAO6I,EAAUlO,QAAQ,GACzBc,OAAQqN,EAAWnO,QAAQ,GAC3BoF,IAAK0I,EAAQ,GACbxI,WAAYA,EACZC,aAAcA,EACdC,oBAAqBA,EACrBC,YAAaA,EACbC,SAAUA,EACVC,QAASA,EACTC,UAAWA,EACXC,SAAUwI,IAEV,KACHP,EAAQ,GACP,cAAC,EAAD,CACEzI,MAAO6I,EAAUlO,QAAQ,GACzBc,OAAQqN,EAAWnO,QAAQ,GAC3BoF,IAAK0I,EAAQ,GACb5C,WAAYA,EACZC,aAAcA,EACdC,SArUK,WACf,IAAMyG,EAAYtM,EAAavF,QACzB8R,EAAY3G,EAAanL,QAG/BoO,EAAcpO,QACZoO,EAAcpO,SAAWqG,SAASC,cAAc,UAClD,IAAMyL,EAAa3D,EAAcpO,QACjC+R,EAAW3Q,MAAQyQ,EAAUzQ,MAC7B2Q,EAAW1R,OAASwR,EAAUxR,OAClB0R,EAAWrK,WAAW,MAC9BC,UAAUkK,EAAW,EAAG,GAC5B,IAAMG,EAAWC,KAAKC,MAAMD,KAAKE,UAAUtD,GAAW7O,UAGtD6R,EAAUzQ,MAAQ0Q,EAAU1Q,MAC5ByQ,EAAUxR,OAASyR,EAAUzR,OACjBwR,EAAUnK,WAAW,MAC7BC,UAAUmK,EAAW,EAAG,GAC5BtM,EAAoBxF,QAAU,IAAIsM,IAAcuF,GAC/CpM,EAAYzF,QAASyG,SAA+BC,IACnDlB,EAAoBxF,QACtB,IAAMoS,EAAW3M,EAAYzF,QAC7BoS,EAAS5K,MAAMzE,EAAI8O,EAAUzQ,MAAQ6D,EACrCmN,EAAS5K,MAAMxE,EAAI6O,EAAUxR,OAAS4E,EACtCS,EAASoJ,GAAW9O,QAASuD,IAC7B+B,EAAWwJ,GAAW9O,SAGtB8R,EAAU1Q,MAAQ2Q,EAAW3Q,MAC7B0Q,EAAUzR,OAAS0R,EAAW1R,OAClByR,EAAUpK,WAAW,MAC7BC,UAAUoK,EAAY,EAAG,GAC7B1G,EAAoBrL,QAAU,IAAIsM,IAAcwF,GAC/CxG,EAAYtL,QAASyG,SAA+BC,IACnD2E,EAAoBrL,QACtB,IAAMqS,EAAW/G,EAAYtL,QAC7BqS,EAAS7K,MAAMzE,EAAI+O,EAAU1Q,MAAQ6D,EACrCoN,EAAS7K,MAAMxE,EAAI8O,EAAUzR,OAAS4E,EACtCsG,EAASyG,EAASzO,IAClB2H,EAAW8G,IA8RD3G,oBAAqBA,EACrBC,YAAaA,EACbC,SAAUA,EACVC,QAASA,EACT7F,QAASA,EACT8F,MAAOA,EACPC,MAAOA,EACP9F,UAAWA,EACXC,SAAU0I,KAEV,KACHT,EAAQ,GACP,cAAC,EAAD,CACEzI,MAAO6I,EAAUlO,QAAQ,GACzBc,OAAQqN,EAAWnO,QAAQ,GAC3BoF,IAAK0I,EAAQ,GACbrC,MAAOA,EACPC,MAAOA,EACP/F,QAASA,EACT6F,QAASA,EACTjG,aAAcA,EACdK,UAAWA,IAEX,QAEJ,KACJ,wBAAQzF,IAAK8L,IACb,qBACE1M,MAAO,CACLiC,SAAU,WACV0I,IAAK,EACLM,MAAO,EACPhK,QAAS,GACTiK,eAAgB,MAChB/J,cAAe,OACf2J,OAAQ,GARZ,SAWE,cAAC,EAAD,CAAQ/K,KAAK,QAAQE,QAAS,kBAAMyO,GAAcD,QAEpD,qBACEzO,MAAO,CACLgL,QAASyD,EAAY,OAAS,OAC9BxM,SAAU,QACV2I,KAAM,EACND,IAAK,EACL9I,MAAO,OACPf,OAAQ,OACRoK,eAAgB,SAChBC,WAAY,SACZL,OAAQ,GAEV7K,QAAS,kBAAMyO,GAAa,IAZ9B,SAcE,sBACE1O,MAAO,CACL+S,WAAY,OACZC,SAAU,IACVnR,MAAO,OACPoR,SAAU,OACVlS,WAAY,OACZ8J,MAAO,QAET5K,QAAS,SAACM,GAAD,OAAOA,EAAEC,mBATpB,UAWE,sBACER,MAAO,CACLgL,QAAS,OACTE,eAAgB,gBAChBjK,QAAS,YACTiS,aAAc,iBACdjR,SAAU,YANd,UASE,wCACA,qBACEpB,KAAK,SACLb,MAAO,CACLiB,QAAS,GACTgB,SAAU,WACVgJ,MAAO,EACPN,IAAK,EACLwI,OAAQ,WAEVlT,QAAS,kBAAMyO,GAAa,IAT9B,kBAcF,sBAAK1O,MAAO,CAAEiB,QAAS,IAAvB,UACE,qBAAKjB,MAAO,CAAEoT,aAAc,IAA5B,oEAGA,uCACO,IACL,mBAAGC,KAAK,8BAA8BC,OAAO,SAA7C,+CCvgBCC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASvD,OACP,cAAC,IAAMwD,WAAP,UACE,cAAC,EAAD,MAEFnN,SAASoN,eAAe,SAM1BX,M","file":"static/js/main.dca03e94.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\nconst Button = ({\n  text,\n  style,\n  onClick,\n  title,\n}: {\n  text: string;\n  style?: any;\n  onClick?: any;\n  title?: string;\n}) => {\n  const buttonRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    const handlePointerDown = (e: PointerEvent) => {\n      e.stopPropagation();\n    };\n    buttonRef.current!.addEventListener(\"pointerdown\", handlePointerDown);\n    return () => {\n      if (buttonRef.current) {\n        buttonRef.current!.removeEventListener(\n          \"pointerdown\",\n          handlePointerDown\n        );\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    const handlePointerDown = (e: MouseEvent) => {\n      e.stopPropagation();\n      onClick(e);\n    };\n    buttonRef.current!.addEventListener(\"click\", handlePointerDown);\n    return () => {\n      if (buttonRef.current) {\n        buttonRef.current!.removeEventListener(\"click\", handlePointerDown);\n      }\n    };\n  }, []);\n\n  return (\n    <div\n      ref={buttonRef}\n      role=\"button\"\n      title={title}\n      style={{\n        ...style,\n        height: 32,\n        lineHeight: \"32px\",\n        minWidth: 32,\n        padding: \"0 8px\",\n        textAlign: \"center\",\n        pointerEvents: \"auto\",\n      }}\n      className=\"button\"\n    >\n      {text}\n    </div>\n  );\n};\n\nexport default Button;\n","import React, { useEffect, useRef } from \"react\";\nimport { render } from \"react-dom\";\nimport * as THREE from \"three\";\n\nexport const UseWheelZoom = (\n  rendererRef: any,\n  camera: THREE.PerspectiveCamera\n) => {\n  const cameraDown = useRef(new THREE.Vector3());\n\n  useEffect(() => {\n    const renderer = rendererRef.current;\n\n    const handleMousewheel = (e: WheelEvent) => {\n      e.preventDefault();\n      const width = renderer.clientWidth;\n      const height = renderer.clientHeight;\n\n      cameraDown.current.copy(camera.position);\n\n      const percent = (height - e.deltaY) / height;\n      const nextZoom = Math.min(32, Math.max(1, camera.position.z / percent));\n\n      const visibleHeight =\n        2 * Math.tan((camera.fov * Math.PI) / 360) * cameraDown.current.z;\n      const zoomPixel = visibleHeight / height;\n      const relx = e.clientX - renderer.offsetLeft - width / 2;\n      const rely = -(e.clientY - renderer.offsetTop - height / 2);\n      const worldRelX = relx * zoomPixel;\n      const worldRelY = rely * zoomPixel;\n\n      const newVisibleHeight =\n        2 * Math.tan((camera.fov * Math.PI) / 360) * nextZoom;\n      const newZoomPixel = newVisibleHeight / height;\n\n      const newWorldX = relx * newZoomPixel;\n      const newWorldY = rely * newZoomPixel;\n\n      const diffX = newWorldX - worldRelX;\n      const diffY = newWorldY - worldRelY;\n\n      camera.position.x = cameraDown.current.x - diffX;\n      camera.position.y = cameraDown.current.y - diffY;\n      camera.position.z = nextZoom;\n    };\n\n    if (renderer) {\n      renderer.addEventListener(\"wheel\", handleMousewheel, {\n        passive: false,\n      });\n      return () => {\n        renderer.removeEventListener(\"wheel\", handleMousewheel);\n      };\n    }\n  }, [rendererRef, camera]);\n};\n\ntype PointerType = {\n  id: number;\n  x: number;\n  y: number;\n  pointerDown: [number, number];\n  primary: boolean;\n};\n\nexport const UsePointerPan = (rendererRef: any, camera: any) => {\n  const cameraDown = useRef(new THREE.Vector3());\n  const diff = useRef(new THREE.Vector2());\n  const pointersRef = useRef<PointerType[]>([]);\n\n  useEffect(() => {\n    const renderer = rendererRef.current;\n    const pointers = pointersRef.current;\n\n    const handlePointerDown = (e: PointerEvent) => {\n      e.preventDefault();\n\n      pointers.push({\n        id: e.pointerId,\n        x: e.clientX - renderer.offsetLeft,\n        y: e.clientY - renderer.offsetTop,\n        pointerDown: [\n          e.clientX - renderer.offsetLeft,\n          e.clientY - renderer.offsetTop,\n        ],\n        primary: e.isPrimary,\n      });\n      for (const pointer of pointers) {\n        pointer.pointerDown = [pointer.x, pointer.y];\n      }\n      cameraDown.current.copy(camera.position);\n\n      renderer.setPointerCapture(e.pointerId);\n    };\n\n    const handlePointerMove = (e: PointerEvent) => {\n      e.preventDefault();\n      const width = renderer.clientWidth;\n      const height = renderer.clientHeight;\n\n      if (pointers.length === 1) {\n        const pointer = pointers[0];\n        pointer.x = e.clientX - renderer.offsetLeft;\n        pointer.y = e.clientY - renderer.offsetTop;\n        const visibleHeight =\n          2 * Math.tan((camera.fov * Math.PI) / 360) * cameraDown.current.z;\n        const zoomPixel = visibleHeight / height;\n        diff.current.x =\n          (e.clientX - renderer.offsetLeft - pointer.pointerDown[0]) *\n          zoomPixel;\n        diff.current.y =\n          (e.clientY - renderer.offsetTop - pointer.pointerDown[1]) * zoomPixel;\n        camera.position.x = cameraDown.current.x - diff.current.x;\n        camera.position.y = cameraDown.current.y + diff.current.y;\n      } else if (pointers.length === 2) {\n        const pointer = pointers.filter((p) => p.id === e.pointerId)[0];\n        pointer.x = e.clientX - renderer.offsetLeft;\n        pointer.y = e.clientY - renderer.offsetTop;\n\n        const a = pointers[0];\n        const b = pointers[1];\n        const minDown = [\n          Math.min(a.pointerDown[0], b.pointerDown[0]),\n          Math.min(a.pointerDown[1], b.pointerDown[1]),\n        ];\n        const maxDown = [\n          Math.max(a.pointerDown[0], b.pointerDown[0]),\n          Math.max(a.pointerDown[1], b.pointerDown[1]),\n        ];\n        const min = [Math.min(a.x, b.x), Math.min(a.y, b.y)];\n        const max = [Math.max(a.x, b.x), Math.max(a.y, b.y)];\n        const combined = {\n          down: [\n            minDown[0] + (maxDown[0] - minDown[0]) / 2,\n            minDown[1] + (maxDown[1] - minDown[1]) / 2,\n          ],\n          current: [\n            min[0] + (max[0] - min[0]) / 2,\n            min[1] + (max[1] - min[1]) / 2,\n          ],\n        };\n\n        const visibleHeight =\n          2 * Math.tan((camera.fov * Math.PI) / 360) * cameraDown.current.z;\n        const zoomPixel = visibleHeight / height;\n\n        const dragged = [\n          (combined.current[0] - combined.down[0]) * zoomPixel,\n          (combined.current[1] - combined.down[1]) * zoomPixel,\n        ];\n\n        const adjustedDown = new THREE.Vector3();\n        adjustedDown.x = cameraDown.current.x - dragged[0];\n        adjustedDown.y = cameraDown.current.y + dragged[1];\n\n        const downDiff = Math.sqrt(\n          Math.pow(a.pointerDown[0] - b.pointerDown[0], 2) +\n            Math.pow(a.pointerDown[1] - b.pointerDown[1], 2)\n        );\n        const currDiff = Math.sqrt(\n          Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2)\n        );\n        const percent = (currDiff - downDiff) / downDiff + 1;\n\n        const relx = combined.current[0] - width / 2;\n        const rely = -(combined.current[1] - height / 2);\n        const worldRelX = relx * zoomPixel;\n        const worldRelY = rely * zoomPixel;\n\n        const nextZoom = Math.min(\n          32,\n          Math.max(1, cameraDown.current.z / percent)\n        );\n\n        const newVisibleHeight =\n          2 * Math.tan((camera.fov * Math.PI) / 360) * nextZoom;\n        const newZoomPixel = newVisibleHeight / height;\n\n        const newWorldX = relx * newZoomPixel;\n        const newWorldY = rely * newZoomPixel;\n\n        const diffX = newWorldX - worldRelX;\n        const diffY = newWorldY - worldRelY;\n\n        camera.position.x = adjustedDown.x - diffX;\n        camera.position.y = adjustedDown.y - diffY;\n        camera.position.z = nextZoom;\n      }\n    };\n\n    const handlePointerUp = (e: PointerEvent) => {\n      e.preventDefault();\n\n      pointers.splice(\n        pointers.findIndex((p) => p.id === e.pointerId),\n        1\n      );\n      for (const pointer of pointers) {\n        pointer.pointerDown = [pointer.x, pointer.y];\n      }\n\n      cameraDown.current.copy(camera.position);\n\n      renderer.releasePointerCapture(e.pointerId);\n    };\n\n    if (renderer) {\n      renderer.addEventListener(\"pointerdown\", handlePointerDown);\n      renderer.addEventListener(\"pointermove\", handlePointerMove);\n      renderer.addEventListener(\"pointerup\", handlePointerUp);\n      return () => {\n        renderer.removeEventListener(\"pointerdown\", handlePointerDown);\n        renderer.removeEventListener(\"pointermove\", handlePointerMove);\n        renderer.removeEventListener(\"pointerup\", handlePointerUp);\n      };\n    }\n  }, [rendererRef, camera]);\n};\n","export const imageScaler = 800;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { layoutBox } from \"./App\";\nimport * as THREE from \"three\";\nimport { MeshBasicMaterial } from \"three\";\nimport Button from \"./Button\";\nimport { UseWheelZoom, UsePointerPan } from \"./PointerUtils\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { imageScaler } from \"./Constants\";\n\nconst cellSize = 16;\n\nconst SrcBlock = ({\n  camera,\n  box,\n  scene,\n  setSrcInfo,\n  srcCanvasRef,\n  srcCanvasTextureRef,\n  srcPlaneRef,\n  setSrcId,\n  srcInfo,\n  activeRef,\n  pasteSrc,\n}: {\n  camera: THREE.PerspectiveCamera;\n  box: layoutBox;\n  scene: THREE.Scene;\n  setSrcInfo: any;\n  srcCanvasRef: any;\n  srcCanvasTextureRef: any;\n  srcPlaneRef: any;\n  setSrcId: any;\n  srcInfo: any;\n  activeRef: any;\n  pasteSrc: string | null;\n}) => {\n  const extraCanvasRef = useRef<HTMLCanvasElement | null>(null);\n  const smallCanvasRef = useRef<HTMLCanvasElement | null>(null);\n  const inputRef = useRef<HTMLInputElement | null>(null);\n  const [sizeReadout, setSizeReadout] = useState(\"\");\n\n  useEffect(() => {\n    camera.position.z = 0;\n\n    const canvas = srcCanvasRef.current || document.createElement(\"canvas\");\n    srcCanvasRef.current = canvas;\n    canvas.width = 64;\n    canvas.height = 64;\n\n    const canvasTexture = new THREE.CanvasTexture(canvas);\n    srcCanvasTextureRef.current = canvasTexture;\n\n    const geometry = new THREE.PlaneGeometry(6, 6);\n    const material = new THREE.MeshBasicMaterial({ map: canvasTexture });\n    const plane = new THREE.Mesh(geometry, material);\n    srcPlaneRef.current = plane;\n    scene.add(plane);\n\n    camera.position.z = 8;\n  }, []);\n\n  useEffect(() => {\n    if (pasteSrc) {\n      loadImage(pasteSrc);\n    }\n  }, [pasteSrc]);\n\n  const counterRef = useRef(0);\n  const loadImage = (src: string) => {\n    counterRef.current++;\n    const image = new Image();\n    const id = uuidv4();\n    setSrcId(id);\n    image.onload = () => {\n      const counter = counterRef.current;\n      const cols = Math.round(image.width / cellSize);\n      const rows = Math.round(image.height / cellSize);\n      const width = cols * cellSize;\n      const height = rows * cellSize;\n      setSizeReadout(`${width}x${height}`);\n\n      const plane = srcPlaneRef.current!;\n      plane.scale.x = image.width / imageScaler;\n      plane.scale.y = image.height / imageScaler;\n\n      const extraCanvas =\n        extraCanvasRef.current || document.createElement(\"canvas\");\n      extraCanvasRef.current = extraCanvas;\n      extraCanvas.width = width;\n      extraCanvas.height = height;\n      const etx = extraCanvas.getContext(\"2d\")!;\n      etx.drawImage(image, 0, 0, extraCanvas.width, extraCanvas.height);\n\n      const lookups: any[] = [];\n      const smallCanvas =\n        smallCanvasRef.current || document.createElement(\"canvas\");\n      smallCanvas.width = cols * 2;\n      smallCanvas.height = rows * 2;\n      const stx = smallCanvas.getContext(\"2d\")!;\n      stx.drawImage(image, 0, 0, smallCanvas.width, smallCanvas.height);\n\n      const canvas = srcCanvasRef.current!;\n      canvas.width = width;\n      canvas.height = height;\n      srcCanvasTextureRef.current! = new THREE.CanvasTexture(canvas);\n      (plane.material as MeshBasicMaterial).map = srcCanvasTextureRef.current!;\n      const ctx = canvas.getContext(\"2d\")!;\n      ctx.fillStyle = \"#111\";\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      const batchSize = 16;\n      const cells = Array(cols * rows)\n        .fill(0)\n        .map((_, i) => i);\n      const drawCell = () => {\n        for (let b = 0; b < batchSize; b++) {\n          const i = cells.shift();\n          if (i !== undefined) {\n            const c = i % cols;\n            const r = Math.floor(i / cols);\n\n            const data = stx.getImageData(c * 2, r * 2, 2, 2).data;\n            let quad = [];\n            for (let j = 0; j < 4 * 4; j += 4) {\n              const pixel = [data[j], data[j + 1], data[j + 2]];\n              quad.push(pixel);\n            }\n            lookups.push(quad);\n\n            ctx.drawImage(\n              image,\n              c * cellSize,\n              r * cellSize,\n              cellSize,\n              cellSize,\n              c * cellSize,\n              r * cellSize,\n              cellSize,\n              cellSize\n            );\n            srcCanvasTextureRef.current!.needsUpdate = true;\n            if (cells.length === 0) {\n              console.log(\"set src\");\n              setSrcInfo({ id, cols, rows, lookups });\n            }\n          }\n          if (b === batchSize - 1 && counterRef.current === counter) {\n            setTimeout(() => {\n              drawCell();\n            }, 0);\n          }\n        }\n      };\n      drawCell();\n    };\n    image.src = src;\n  };\n\n  useEffect(() => {\n    loadImage(\"/minidisc.jpg?=2\");\n  }, []);\n\n  useEffect(() => {\n    async function handleChange(this: any) {\n      for (let item of this.files) {\n        if (item.type.indexOf(\"image\") < 0) {\n          continue;\n        }\n        let src = URL.createObjectURL(item);\n        loadImage(src);\n      }\n    }\n    inputRef.current!.addEventListener(\"change\", handleChange);\n    return () => {\n      inputRef.current!.removeEventListener(\"change\", handleChange);\n    };\n  }, []);\n\n  const elementRef = useRef<HTMLDivElement | null>(null);\n  UseWheelZoom(elementRef, camera);\n  UsePointerPan(elementRef, camera);\n\n  useEffect(() => {\n    if (srcInfo) {\n      setSizeReadout(`${srcInfo.cols * cellSize}x${srcInfo.rows * cellSize}`);\n    }\n  }, [srcInfo]);\n\n  return (\n    <div\n      ref={elementRef}\n      className=\"portion\"\n      onPointerDown={() => (activeRef.current = 2)}\n      style={{\n        position: \"absolute\",\n        bottom: box.top,\n        left: box.left,\n        width: box.width,\n        height: box.height,\n        color: \"#ddd\",\n        zIndex: 1,\n      }}\n    >\n      <div\n        style={{\n          padding: \"12px 8px\",\n        }}\n      >\n        SRC\n      </div>\n      <input\n        type=\"file\"\n        ref={inputRef}\n        accept=\".jpg,.png,.jpeg\"\n        style={{ display: \"none\" }}\n      />\n      <div\n        style={{\n          position: \"absolute\",\n          left: 0,\n          right: 0,\n          bottom: 0,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          padding: 16,\n        }}\n      >\n        <div className=\"readout\">{sizeReadout}</div>\n        <Button\n          text=\"↑\"\n          title=\"Upload image\"\n          onClick={() => {\n            const input = inputRef.current!;\n            input.dispatchEvent(\n              new PointerEvent(\"click\", {\n                bubbles: true,\n                cancelable: true,\n                view: window,\n              })\n            );\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default SrcBlock;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { layoutBox } from \"./App\";\nimport * as THREE from \"three\";\nimport { MeshBasicMaterial } from \"three\";\nimport Button from \"./Button\";\nimport { UseWheelZoom, UsePointerPan } from \"./PointerUtils\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { imageScaler } from \"./Constants\";\n\nconst cellSize = 16;\n\nconst DstBlock = ({\n  camera,\n  box,\n  scene,\n  setDstInfo,\n  dstCanvasRef,\n  swapInfo,\n  dstCanvasTextureRef,\n  dstPlaneRef,\n  setDstId,\n  dstInfo,\n  activeRef,\n  pasteSrc,\n  srcInfo,\n  srcId,\n  dstId,\n}: {\n  camera: THREE.PerspectiveCamera;\n  box: layoutBox;\n  scene: THREE.Scene;\n  setDstInfo: any;\n  dstCanvasRef: any;\n  swapInfo: any;\n  dstCanvasTextureRef: any;\n  dstPlaneRef: any;\n  setDstId: any;\n  dstInfo: any;\n  activeRef: any;\n  pasteSrc: string | null;\n  srcInfo: any;\n  srcId: string | null;\n  dstId: string | null;\n}) => {\n  const inputRef = useRef<HTMLInputElement | null>(null);\n  const smallCanvasRef = useRef<HTMLCanvasElement | null>(null);\n  const extraCanvasRef = useRef<HTMLCanvasElement | null>(null);\n  const [sizeReadout, setSizeReadout] = useState(\"\");\n\n  useEffect(() => {\n    camera.position.z = 0;\n\n    const canvas = dstCanvasRef.current || document.createElement(\"canvas\");\n    dstCanvasRef.current = canvas;\n    canvas.width = 64;\n    canvas.height = 64;\n    const ctx = canvas.getContext(\"2d\")!;\n    ctx.fillStyle = \"#fff\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    const canvasTexture = new THREE.CanvasTexture(canvas);\n    dstCanvasTextureRef.current = canvasTexture;\n\n    const geometry = new THREE.PlaneGeometry(6, 6);\n    const material = new THREE.MeshBasicMaterial({ map: canvasTexture });\n    const plane = new THREE.Mesh(geometry, material);\n    dstPlaneRef.current = plane;\n    scene.add(plane);\n\n    camera.position.z = 8;\n  }, []);\n\n  useEffect(() => {\n    if (pasteSrc) {\n      loadImage(pasteSrc);\n    }\n  }, [pasteSrc]);\n\n  const counterRef = useRef(0);\n  const loadImage = (src: string) => {\n    counterRef.current++;\n    const image = new Image();\n    const id = uuidv4();\n    setDstId(id);\n    image.onload = () => {\n      const counter = counterRef.current;\n      const cols = Math.round(image.width / cellSize);\n      const rows = Math.round(image.height / cellSize);\n      const width = cols * cellSize;\n      const height = rows * cellSize;\n      setSizeReadout(`${width}x${height}`);\n\n      const plane = dstPlaneRef.current!;\n      plane.scale.x = image.width / imageScaler;\n      plane.scale.y = image.height / imageScaler;\n\n      const extraCanvas =\n        extraCanvasRef.current || document.createElement(\"canvas\");\n      extraCanvasRef.current = extraCanvas;\n      extraCanvas.width = width;\n      extraCanvas.height = height;\n      const etx = extraCanvas.getContext(\"2d\")!;\n      etx.drawImage(image, 0, 0, extraCanvas.width, extraCanvas.height);\n\n      const lookups: any[] = [];\n      const smallCanvas =\n        smallCanvasRef.current || document.createElement(\"canvas\");\n      smallCanvas.width = cols * 2;\n      smallCanvas.height = rows * 2;\n      const stx = smallCanvas.getContext(\"2d\")!;\n      stx.drawImage(image, 0, 0, smallCanvas.width, smallCanvas.height);\n\n      const canvas = dstCanvasRef.current!;\n      canvas.width = width;\n      canvas.height = height;\n      dstCanvasTextureRef.current! = new THREE.CanvasTexture(canvas);\n      (plane.material as MeshBasicMaterial).map = dstCanvasTextureRef.current!;\n      const ctx = canvas.getContext(\"2d\")!;\n      ctx.fillStyle = \"#111\";\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      const cells = Array(cols * rows)\n        .fill(0)\n        .map((_, i) => i);\n      const batchSize = 16;\n      const drawCell = () => {\n        for (let b = 0; b < batchSize; b++) {\n          const i = cells.shift();\n          if (i !== undefined) {\n            const c = i % cols;\n            const r = Math.floor(i / cols);\n\n            const data = stx.getImageData(c * 2, r * 2, 2, 2).data;\n            let quad = [];\n            for (let j = 0; j < 4 * 4; j += 4) {\n              const pixel = [data[j], data[j + 1], data[j + 2]];\n              quad.push(pixel);\n            }\n            lookups.push(quad);\n\n            ctx.drawImage(\n              image,\n              c * cellSize,\n              r * cellSize,\n              cellSize,\n              cellSize,\n              c * cellSize,\n              r * cellSize,\n              cellSize,\n              cellSize\n            );\n            dstCanvasTextureRef.current!.needsUpdate = true;\n            if (cells.length === 0) {\n              setDstInfo({ id, cols, rows, lookups });\n            }\n          }\n          if (b === batchSize - 1 && counterRef.current === counter) {\n            setTimeout(() => {\n              drawCell();\n            }, 0);\n          }\n        }\n      };\n      drawCell();\n    };\n    image.src = src;\n  };\n\n  useEffect(() => {\n    loadImage(\"/computers.jpg?=1\");\n  }, []);\n\n  useEffect(() => {\n    async function handleChange(this: any) {\n      for (let item of this.files) {\n        if (item.type.indexOf(\"image\") < 0) {\n          continue;\n        }\n        let src = URL.createObjectURL(item);\n        loadImage(src);\n      }\n    }\n    inputRef.current!.addEventListener(\"change\", handleChange);\n    return () => {\n      inputRef.current!.removeEventListener(\"change\", handleChange);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (dstInfo) {\n      setSizeReadout(`${dstInfo.cols * cellSize}x${dstInfo.rows * cellSize}`);\n    }\n  }, [dstInfo]);\n\n  const elementRef = useRef<HTMLDivElement | null>(null);\n  UseWheelZoom(elementRef, camera);\n  UsePointerPan(elementRef, camera);\n\n  return (\n    <div\n      ref={elementRef}\n      className=\"portion\"\n      style={{\n        position: \"absolute\",\n        bottom: box.top,\n        left: box.left,\n        width: box.width,\n        height: box.height,\n        color: \"#ddd\",\n        outline: \"1px solid #3333\",\n        zIndex: 1,\n      }}\n      onPointerDown={() => (activeRef.current = 2)}\n    >\n      <div\n        style={{\n          padding: \"12px 8px\",\n        }}\n      >\n        DST\n      </div>\n      <input\n        type=\"file\"\n        ref={inputRef}\n        accept=\".jpg,.png,.jpeg\"\n        style={{ display: \"none\" }}\n      />\n      <div\n        style={{\n          position: \"absolute\",\n          left: 0,\n          right: 0,\n          top: 0,\n          display: \"flex\",\n          justifyContent: \"end\",\n          alignItems: \"center\",\n          padding: 16,\n        }}\n      ></div>\n      <div\n        style={{\n          position: \"absolute\",\n          left: 0,\n          right: 0,\n          bottom: 0,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          padding: 16,\n        }}\n      >\n        <div className=\"readout\">{sizeReadout}</div>\n        <div style={{ display: \"flex\", gap: 16 }}>\n          {srcInfo &&\n          srcInfo.id === srcId &&\n          dstInfo &&\n          dstInfo.id === dstId ? (\n            <Button\n              text=\"↕\"\n              title=\"Swap src and dst\"\n              style={{\n                transformOrigin: \"center center\",\n                transform: \"rotate(90deg)\",\n              }}\n              onClick={() => {\n                swapInfo();\n              }}\n            />\n          ) : null}\n          <Button\n            text=\"↑\"\n            title=\"Upload image\"\n            onClick={() => {\n              const input = inputRef.current!;\n              input.dispatchEvent(\n                new MouseEvent(\"click\", {\n                  bubbles: true,\n                  cancelable: true,\n                  view: window,\n                })\n              );\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DstBlock;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { layoutBox } from \"./App\";\nimport * as THREE from \"three\";\nimport { CanvasTexture, MeshBasicMaterial } from \"three\";\nimport Button from \"./Button\";\nimport { UseWheelZoom, UsePointerPan } from \"./PointerUtils\";\nimport { imageScaler } from \"./Constants\";\n\nconst cellSize = 16;\n\nconst MscBlock = ({\n  camera,\n  box,\n  scene,\n  srcInfo,\n  dstInfo,\n  srcCanvasRef,\n  dstId,\n  srcId,\n  activeRef,\n}: {\n  camera: THREE.PerspectiveCamera;\n  box: layoutBox;\n  scene: THREE.Scene;\n  srcCanvasRef: React.RefObject<HTMLCanvasElement>;\n  srcInfo: any;\n  dstInfo: any;\n  dstId: string | null;\n  srcId: string | null;\n  activeRef: any;\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const canvasTextureRef = useRef<THREE.CanvasTexture | null>(null);\n  const planeRef = useRef<THREE.Mesh | null>(null);\n  const [sizeReadout, setSizeReadout] = useState(\"\");\n  const [loaded, setLoaded] = useState(false);\n\n  useEffect(() => {\n    camera.position.z = 0;\n\n    const canvas = canvasRef.current || document.createElement(\"canvas\");\n    canvasRef.current = canvas;\n    canvas.width = 64;\n    canvas.height = 64;\n\n    const canvasTexture = new THREE.CanvasTexture(canvas);\n    canvasTextureRef.current = canvasTexture;\n\n    const geometry = new THREE.PlaneGeometry(6, 6);\n    const material = new THREE.MeshBasicMaterial({ map: canvasTexture });\n    const plane = new THREE.Mesh(geometry, material);\n    planeRef.current = plane;\n    scene.add(plane);\n\n    camera.position.z = 8;\n  }, []);\n\n  const counterRef = useRef(0);\n  useEffect(() => {\n    setLoaded(false);\n    if (srcInfo && dstInfo) {\n      counterRef.current++;\n      console.log(\"regen\");\n      const width = dstInfo.cols * cellSize;\n      const height = dstInfo.rows * cellSize;\n      setSizeReadout(`${width}x${height}`);\n\n      const plane = planeRef.current!;\n      plane.scale.x = width / imageScaler;\n      plane.scale.y = height / imageScaler;\n\n      const canvas = canvasRef.current!;\n      canvas.width = width;\n      canvas.height = height;\n      const ctx = canvas.getContext(\"2d\")!;\n      ctx.fillStyle = \"#111\";\n      ctx.fillRect(0, 0, width, height);\n      (planeRef.current!.material as MeshBasicMaterial).map = new CanvasTexture(\n        canvas\n      );\n      (planeRef.current!.material as MeshBasicMaterial).needsUpdate = true;\n\n      const cells = Array(dstInfo.cols * dstInfo.rows)\n        .fill(0)\n        .map((_, i) => i);\n\n      const counter = counterRef.current;\n      const batchSize = 4;\n      const drawCell = () => {\n        if (\n          counterRef.current === counter &&\n          srcId === srcInfo.id &&\n          dstId === dstInfo.id\n        ) {\n          for (let b = 0; b < batchSize; b++) {\n            const i = cells.shift();\n            if (i !== undefined) {\n              const c = i % dstInfo.cols;\n              const r = Math.floor(i / dstInfo.cols);\n              let min = Infinity;\n              let minIndex = -1;\n              const dstLookup = dstInfo.lookups[i];\n              for (let j = 0; j < srcInfo.cols * srcInfo.rows; j++) {\n                const srcLookup = srcInfo.lookups[j];\n                let fullSum = 0;\n                for (let k = 0; k < 4; k++) {\n                  const lookupPixel = srcLookup[k];\n                  const pixel = dstLookup[k];\n                  // @ts-ignore\n                  const diff = pixel.map((v, l) =>\n                    Math.abs(v - lookupPixel[l])\n                  );\n                  const sum = diff.reduce((a: number, b: number) => a + b, 0);\n                  fullSum += sum;\n                }\n                if (fullSum < min) {\n                  min = fullSum;\n                  minIndex = j;\n                }\n              }\n\n              const sc = minIndex % srcInfo.cols;\n              const sr = Math.floor(minIndex / srcInfo.cols);\n              ctx.drawImage(\n                srcCanvasRef.current!,\n                sc * cellSize,\n                sr * cellSize,\n                cellSize,\n                cellSize,\n                c * cellSize,\n                r * cellSize,\n                cellSize,\n                cellSize\n              );\n              (\n                planeRef.current!.material as MeshBasicMaterial\n              ).map!.needsUpdate = true;\n              if (cells.length === 0) {\n                console.log(\"done\");\n                setLoaded(true);\n              }\n            }\n            if (b === batchSize - 1) {\n              setTimeout(() => {\n                drawCell();\n              }, 0);\n            }\n          }\n        }\n      };\n      drawCell();\n    }\n  }, [srcInfo, dstInfo, srcId, dstId]);\n\n  const elementRef = useRef<HTMLDivElement | null>(null);\n  UseWheelZoom(elementRef, camera);\n  UsePointerPan(elementRef, camera);\n\n  return (\n    <div\n      ref={elementRef}\n      className=\"portion\"\n      onPointerDown={() => (activeRef.current = 2)}\n      style={{\n        position: \"absolute\",\n        bottom: box.top,\n        left: box.left,\n        width: box.width,\n        height: box.height,\n        color: \"#ddd\",\n      }}\n    >\n      <div\n        style={{\n          position: \"absolute\",\n          left: 0,\n          right: 0,\n          bottom: 0,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          padding: 16,\n          height: 64,\n        }}\n      >\n        <div className=\"readout\">{sizeReadout}</div>\n        {loaded ? (\n          <Button\n            text=\"↓\"\n            title=\"Download image\"\n            onClick={() => {\n              canvasRef.current!.toBlob(async (blob) => {\n                const imageURL = URL.createObjectURL(blob!);\n                let link = document.createElement(\"a\");\n                link.setAttribute(\n                  \"download\",\n                  \"mosaic-\" + Math.round(new Date().getTime() / 1000) + \".png\"\n                );\n                link.setAttribute(\"href\", imageURL);\n                link.dispatchEvent(\n                  new MouseEvent(`click`, {\n                    bubbles: true,\n                    cancelable: true,\n                    view: window,\n                  })\n                );\n              });\n            }}\n          />\n        ) : (\n          <div style={{ color: \"#888\" }}>processing...</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MscBlock;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { useLayout } from \"./Utils\";\nimport * as THREE from \"three\";\nimport SrcBlock from \"./SrcBlock\";\nimport DstBlock from \"./DstBlock\";\nimport MscBlock from \"./MscBlock\";\nimport Button from \"./Button\";\nimport { CanvasTexture, MeshBasicMaterial } from \"three\";\nimport { imageScaler } from \"./Constants\";\n\nexport type layoutBox = {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n};\n\nexport type srcInfoType = {\n  id: string;\n  width: number;\n  height: number;\n  lookups: any[];\n};\n\nexport type dstInfoType = {\n  id: string;\n  width: number;\n  height: number;\n  lookups: any[];\n};\n\nfunction App() {\n  const [loaded, setLoaded] = useState(false);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const layoutRef = useRef<layoutBox[]>([]);\n  const [layouts, setLayouts] = useState<layoutBox[]>([]);\n  const [srcInfo, setSrcInfo] = useState<srcInfoType | null>(null);\n  const [dstInfo, setDstInfo] = useState<dstInfoType | null>(null);\n  const [srcId, setSrcId] = useState<string | null>(null);\n  const [dstId, setDstId] = useState<string | null>(null);\n  const [showAbout, setShowAbout] = useState(false);\n  const srcCanvasRef = useRef<HTMLCanvasElement>(null);\n  const dstCanvasRef = useRef<HTMLCanvasElement>(null);\n  const scenesRef = useRef<THREE.Scene[]>([]);\n  const camerasRef = useRef<THREE.PerspectiveCamera[]>([]);\n  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);\n  const srcCanvasTextureRef = useRef<CanvasTexture | null>(null);\n  const dstCanvasTextureRef = useRef<CanvasTexture | null>(null);\n  const srcPlaneRef = useRef<THREE.Mesh | null>(null);\n  const dstPlaneRef = useRef<THREE.Mesh | null>(null);\n  const holdCanvasRef = useRef<HTMLCanvasElement | null>(null);\n  const activeRef = useRef<number>(0);\n  const [srcPasteSrc, setSrcPasteSrc] = useState<string | null>(null);\n  const [dstPasteSrc, setDstPasteSrc] = useState<string | null>(null);\n  const pressedRef = useRef<string[]>([]);\n\n  const setLayout = () => {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    if (width > height) {\n      layoutRef.current = [\n        {\n          left: 0,\n          top: height / 2,\n          width: width / 2,\n          height: height / 2,\n        },\n        {\n          left: 0,\n          top: 0,\n          width: width / 2,\n          height: height / 2,\n        },\n        {\n          left: width / 2,\n          top: 0,\n          width: width / 2,\n          height: height,\n        },\n      ];\n    } else {\n      layoutRef.current = [\n        {\n          left: 0,\n          top: height / 2,\n          width: width / 2,\n          height: height / 2,\n        },\n        {\n          left: width / 2,\n          top: height / 2,\n          width: width / 2,\n          height: height / 2,\n        },\n        {\n          left: 0,\n          top: 0,\n          width: width,\n          height: height / 2,\n        },\n      ];\n    }\n    console.log(\"set layout\");\n  };\n  setLayout();\n\n  const srcInfoRef = useRef<srcInfoType | null>(srcInfo);\n  const dstInfoRef = useRef<dstInfoType | null>(dstInfo);\n  useEffect(() => {\n    srcInfoRef.current = srcInfo;\n    dstInfoRef.current = dstInfo;\n  }, [srcInfo, dstInfo]);\n  const swapInfo = () => {\n    const srcCanvas = srcCanvasRef.current!;\n    const dstCanvas = dstCanvasRef.current!;\n\n    // Hold src\n    holdCanvasRef.current =\n      holdCanvasRef.current || document.createElement(\"canvas\");\n    const holdCanvas = holdCanvasRef.current!;\n    holdCanvas.width = srcCanvas.width;\n    holdCanvas.height = srcCanvas.height;\n    const htx = holdCanvas.getContext(\"2d\")!;\n    htx.drawImage(srcCanvas, 0, 0);\n    const holdInfo = JSON.parse(JSON.stringify(srcInfoRef.current));\n\n    // Set new src\n    srcCanvas.width = dstCanvas.width;\n    srcCanvas.height = dstCanvas.height;\n    const stx = srcCanvas.getContext(\"2d\")!;\n    stx.drawImage(dstCanvas, 0, 0);\n    srcCanvasTextureRef.current = new CanvasTexture(srcCanvas);\n    (srcPlaneRef.current!.material as MeshBasicMaterial).map =\n      srcCanvasTextureRef.current;\n    const srcPlane = srcPlaneRef.current!;\n    srcPlane.scale.x = srcCanvas.width / imageScaler;\n    srcPlane.scale.y = srcCanvas.height / imageScaler;\n    setSrcId(dstInfoRef.current!.id);\n    setSrcInfo(dstInfoRef.current);\n\n    // Set new dst\n    dstCanvas.width = holdCanvas.width;\n    dstCanvas.height = holdCanvas.height;\n    const dtx = dstCanvas.getContext(\"2d\")!;\n    dtx.drawImage(holdCanvas, 0, 0);\n    dstCanvasTextureRef.current = new CanvasTexture(dstCanvas);\n    (dstPlaneRef.current!.material as MeshBasicMaterial).map =\n      dstCanvasTextureRef.current;\n    const dstPlane = dstPlaneRef.current!;\n    dstPlane.scale.x = dstCanvas.width / imageScaler;\n    dstPlane.scale.y = dstCanvas.height / imageScaler;\n    setDstId(holdInfo.id);\n    setDstInfo(holdInfo);\n  };\n\n  useEffect(() => {\n    const [srcBox, dstBox, mscBox] = layoutRef.current!;\n\n    const cameraSrc = new THREE.PerspectiveCamera(\n      75,\n      srcBox.width / srcBox.height,\n      0.1,\n      1000\n    );\n    const cameraDst = new THREE.PerspectiveCamera(\n      75,\n      dstBox.width / dstBox.height,\n      0.1,\n      1000\n    );\n    const cameraMsc = new THREE.PerspectiveCamera(\n      75,\n      mscBox.width / mscBox.height,\n      0.1,\n      1000\n    );\n    camerasRef.current = [cameraSrc, cameraDst, cameraMsc];\n\n    const renderer = new THREE.WebGLRenderer({\n      canvas: canvasRef.current!,\n    });\n    rendererRef.current = renderer;\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    const sceneSrc = new THREE.Scene();\n    const sceneDst = new THREE.Scene();\n    const sceneMsc = new THREE.Scene();\n    scenesRef.current = [sceneSrc, sceneDst, sceneMsc];\n\n    {\n      const geometry = new THREE.PlaneGeometry(1, 1);\n      const material = new THREE.MeshBasicMaterial({ color: 0x000000 });\n\n      const plane = new THREE.Mesh(geometry, material);\n      sceneDst.add(plane);\n    }\n    {\n      const geometry = new THREE.PlaneGeometry(1, 1);\n      const material = new THREE.MeshBasicMaterial({ color: 0x000000 });\n      const plane = new THREE.Mesh(geometry, material);\n      sceneMsc.add(plane);\n    }\n\n    cameraSrc.position.z = 5;\n    cameraDst.position.z = 5;\n    cameraMsc.position.z = 5;\n\n    renderer.autoClear = false;\n\n    setLoaded(true);\n  }, []);\n\n  useEffect(() => {\n    const animate = () => {\n      const renderer = rendererRef.current!;\n      renderer.clear();\n\n      const [srcBox, dstBox, mscBox] = layoutRef.current!;\n      const [cameraSrc, cameraDst, cameraMsc] = camerasRef.current!;\n      const [sceneSrc, sceneDst, sceneMsc] = scenesRef.current!;\n      {\n        const { left, top, width, height } = srcBox;\n        renderer.setScissor(left, top, width, height);\n        renderer.setViewport(left, top, width, height);\n        renderer.render(sceneSrc, cameraSrc);\n      }\n      {\n        const { left, top, width, height } = dstBox;\n        renderer.setScissor(left, top, width, height);\n        renderer.setViewport(left, top, width, height);\n        renderer.render(sceneDst, cameraDst);\n      }\n      {\n        const { left, top, width, height } = mscBox;\n        renderer.setScissor(left, top, width, height);\n        renderer.setViewport(left, top, width, height);\n        renderer.render(sceneMsc, cameraMsc);\n      }\n      requestAnimationFrame(animate);\n    };\n    animate();\n  }, []);\n\n  useEffect(() => {\n    const handleResize = () => {\n      setLayout();\n      const layoutBoxes = layoutRef.current!;\n      for (let i = 0; i < layoutBoxes.length; i++) {\n        const box = layoutBoxes[i];\n        const camera = camerasRef.current![i];\n        camera.aspect = box.width / box.height;\n        camera.updateProjectionMatrix();\n      }\n      rendererRef.current!.setSize(window.innerWidth, window.innerHeight);\n      setLayouts(layoutBoxes);\n    };\n    handleResize();\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  useEffect(() => {\n    const move = (e: PointerEvent) => {\n      if (layoutRef.current) {\n        let counter = 0;\n        for (const box of layoutRef.current) {\n          const x = e.clientX;\n          const y = window.innerHeight - e.clientY;\n          if (\n            x >= box.left &&\n            x <= box.left + box.width &&\n            y >= box.top &&\n            y <= box.top + box.height\n          ) {\n            activeRef.current = counter;\n            break;\n          }\n          counter++;\n        }\n      }\n    };\n    window.addEventListener(\"pointermove\", move);\n    return () => window.removeEventListener(\"pointermove\", move);\n  }, []);\n\n  useEffect(() => {\n    const onPaste = (e: any) => {\n      const ref = activeRef;\n      e.preventDefault();\n      e.stopPropagation();\n      for (const item of e.clipboardData.items) {\n        if (item.type.indexOf(\"image\") < 0) {\n          continue;\n        }\n        let file = item.getAsFile();\n        let src = URL.createObjectURL(file);\n        if (ref.current === 0) {\n          setSrcPasteSrc(src);\n        } else if (ref.current === 1) {\n          setDstPasteSrc(src);\n        } else {\n          alert(\"Choose the SRC or DST block to paste to\");\n        }\n      }\n    };\n\n    const onDrop = (e: any) => {\n      const ref = activeRef;\n      e.preventDefault();\n      e.stopPropagation();\n      let file = e.dataTransfer.files[0];\n      let src = URL.createObjectURL(file);\n      if (ref.current === 0) {\n        setSrcPasteSrc(src);\n      } else if (ref.current === 1) {\n        setDstPasteSrc(src);\n      } else {\n        alert(\"Drag to the SRC or DST block\");\n      }\n    };\n\n    const onDrag = (e: any) => {\n      e.stopPropagation();\n      e.preventDefault();\n      e.dataTransfer.dropEffect = \"copy\";\n    };\n\n    window.addEventListener(\"paste\", onPaste);\n    window.addEventListener(\"dragover\", onDrag);\n    window.addEventListener(\"drop\", onDrop);\n    return () => {\n      window.removeEventListener(\"paste\", onPaste);\n      window.removeEventListener(\"dragover\", onDrag);\n      window.removeEventListener(\"drop\", onDrop);\n    };\n  }, []);\n\n  // keyboard handler\n  useEffect(() => {\n    const pressed = pressedRef.current;\n\n    const discretePanCamera = (diff: Array<number>) => {\n      const camera = camerasRef.current![activeRef.current!];\n      const visibleHeight =\n        2 * Math.tan((camera.fov * Math.PI) / 360) * camera.position.z;\n      const zoomPixel = visibleHeight / window.innerHeight;\n      camera.position.x -= 16 * diff[0] * zoomPixel;\n      camera.position.y += 16 * diff[1] * zoomPixel;\n    };\n\n    const discreteZoom = (change: number) => {\n      const camera = camerasRef.current![activeRef.current!];\n      const percent = (window.innerHeight - change) / window.innerHeight;\n      camera.position.z = Math.min(\n        32,\n        Math.max(1, camera.position.z / percent)\n      );\n    };\n\n    const downHandler = (e: KeyboardEvent) => {\n      let press = e.key.toLowerCase();\n      if (press === \"escape\") {\n        setShowAbout(false);\n      }\n      if (press === \"-\") {\n        discreteZoom(32 * 2);\n      } else if (press === \"+\" || press === \"=\") {\n        discreteZoom(-32 * 2);\n      }\n      if (!pressed.includes(press)) {\n        pressed.push(press);\n      }\n      if (pressed.includes(\"arrowleft\") || pressed.includes(\"h\")) {\n        discretePanCamera([1 * 2, 0]);\n      }\n      if (pressed.includes(\"arrowright\") || pressed.includes(\"l\")) {\n        discretePanCamera([-1 * 2, 0]);\n      }\n      if (pressed.includes(\"arrowup\") || pressed.includes(\"k\")) {\n        if (e.shiftKey) {\n          discreteZoom(32 * 2);\n        } else {\n          discretePanCamera([0, 1 * 2]);\n        }\n      }\n      if (pressed.includes(\"arrowdown\") || pressed.includes(\"j\")) {\n        if (e.shiftKey) {\n          discreteZoom(-32 * 2);\n        } else {\n          discretePanCamera([0, -1 * 2]);\n        }\n      }\n    };\n\n    const upHandler = (e: KeyboardEvent) => {\n      let press = e.key.toLowerCase();\n      const index = pressed.indexOf(press);\n      if (index !== -1) {\n        pressed.splice(index, 1);\n      }\n    };\n\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, []);\n\n  return (\n    <>\n      {loaded ? (\n        <>\n          {layouts[0] ? (\n            <SrcBlock\n              scene={scenesRef.current[0]}\n              camera={camerasRef.current[0]}\n              box={layouts[0]}\n              setSrcInfo={setSrcInfo}\n              srcCanvasRef={srcCanvasRef}\n              srcCanvasTextureRef={srcCanvasTextureRef}\n              srcPlaneRef={srcPlaneRef}\n              setSrcId={setSrcId}\n              srcInfo={srcInfo}\n              activeRef={activeRef}\n              pasteSrc={srcPasteSrc}\n            />\n          ) : null}\n          {layouts[1] ? (\n            <DstBlock\n              scene={scenesRef.current[1]}\n              camera={camerasRef.current[1]}\n              box={layouts[1]}\n              setDstInfo={setDstInfo}\n              dstCanvasRef={dstCanvasRef}\n              swapInfo={swapInfo}\n              dstCanvasTextureRef={dstCanvasTextureRef}\n              dstPlaneRef={dstPlaneRef}\n              setDstId={setDstId}\n              dstInfo={dstInfo}\n              srcInfo={srcInfo}\n              srcId={srcId}\n              dstId={dstId}\n              activeRef={activeRef}\n              pasteSrc={dstPasteSrc}\n            />\n          ) : null}\n          {layouts[1] ? (\n            <MscBlock\n              scene={scenesRef.current[2]}\n              camera={camerasRef.current[2]}\n              box={layouts[2]}\n              srcId={srcId}\n              dstId={dstId}\n              srcInfo={srcInfo}\n              dstInfo={dstInfo}\n              srcCanvasRef={srcCanvasRef}\n              activeRef={activeRef}\n            />\n          ) : null}\n        </>\n      ) : null}\n      <canvas ref={canvasRef} />\n      <div\n        style={{\n          position: \"absolute\",\n          top: 0,\n          right: 0,\n          padding: 16,\n          justifyContent: \"end\",\n          pointerEvents: \"none\",\n          zIndex: 2,\n        }}\n      >\n        <Button text=\"About\" onClick={() => setShowAbout(!showAbout)} />\n      </div>\n      <div\n        style={{\n          display: showAbout ? \"flex\" : \"none\",\n          position: \"fixed\",\n          left: 0,\n          top: 0,\n          width: \"100%\",\n          height: \"100%\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          zIndex: 3,\n        }}\n        onClick={() => setShowAbout(false)}\n      >\n        <div\n          style={{\n            background: \"#222\",\n            maxWidth: 440,\n            width: \"100%\",\n            fontSize: \"16px\",\n            lineHeight: \"24px\",\n            color: \"#ddd\",\n          }}\n          onClick={(e) => e.stopPropagation()}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              padding: \"16px 16px\",\n              borderBottom: \"1px solid #444\",\n              position: \"relative\",\n            }}\n          >\n            <div>About</div>\n            <div\n              role=\"button\"\n              style={{\n                padding: 16,\n                position: \"absolute\",\n                right: 0,\n                top: 0,\n                cursor: \"pointer\",\n              }}\n              onClick={() => setShowAbout(false)}\n            >\n              X\n            </div>\n          </div>\n          <div style={{ padding: 16 }}>\n            <div style={{ marginBottom: 16 }}>\n              Recreate one image using the tiles from another image.\n            </div>\n            <div>\n              from{\" \"}\n              <a href=\"https://constraint.systems/\" target=\"_blank\">\n                Constraint Systems\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./font.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}